ARM GAS  /tmp/ccn7bP8l.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_GPIO_Init,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	MX_GPIO_Init:
  26              	.LFB339:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c **** 	******************************************************************************
   4:Core/Src/main.c **** 	* @file           : main.c
   5:Core/Src/main.c **** 	* @brief          : Main program body
   6:Core/Src/main.c **** 	******************************************************************************
   7:Core/Src/main.c **** 	* @attention
   8:Core/Src/main.c **** 	*
   9:Core/Src/main.c **** 	* <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c **** 	* All rights reserved.</center></h2>
  11:Core/Src/main.c **** 	*
  12:Core/Src/main.c **** 	* This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c **** 	* the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c **** 	* License. You may obtain a copy of the License at:
  15:Core/Src/main.c **** 	*                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c **** 	*
  17:Core/Src/main.c **** 	******************************************************************************
  18:Core/Src/main.c **** 	*/
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  /tmp/ccn7bP8l.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  44:Core/Src/main.c **** ADC_HandleTypeDef hadc2;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** FDCAN_HandleTypeDef hfdcan1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  49:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  50:Core/Src/main.c **** TIM_HandleTypeDef htim16;
  51:Core/Src/main.c **** TIM_HandleTypeDef htim17;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** UART_HandleTypeDef huart1;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** uint8_t batata;
  57:Core/Src/main.c **** uint8_t ubKeyNumber = 0x0;
  58:Core/Src/main.c **** FDCAN_RxHeaderTypeDef RxHeader;
  59:Core/Src/main.c **** uint8_t RxData[8];
  60:Core/Src/main.c **** FDCAN_TxHeaderTypeDef TxHeader;
  61:Core/Src/main.c **** uint8_t TxData[8];
  62:Core/Src/main.c **** /* USER CODE END PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/main.c **** void SystemClock_Config(void);
  66:Core/Src/main.c **** static void MX_GPIO_Init(void);
  67:Core/Src/main.c **** static void MX_ADC1_Init(void);
  68:Core/Src/main.c **** static void MX_ADC2_Init(void);
  69:Core/Src/main.c **** static void MX_FDCAN1_Init(void);
  70:Core/Src/main.c **** static void MX_USART1_UART_Init(void);
  71:Core/Src/main.c **** static void MX_TIM2_Init(void);
  72:Core/Src/main.c **** static void MX_TIM16_Init(void);
  73:Core/Src/main.c **** static void MX_TIM17_Init(void);
  74:Core/Src/main.c **** static void MX_TIM1_Init(void);
  75:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  76:Core/Src/main.c **** static void FDCAN_Config(void);
  77:Core/Src/main.c **** /* USER CODE END PFP */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  80:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /* USER CODE END 0 */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /**
  85:Core/Src/main.c ****   * @brief  The application entry point.
  86:Core/Src/main.c ****   * @retval int
  87:Core/Src/main.c ****   */
  88:Core/Src/main.c **** int main(void)
ARM GAS  /tmp/ccn7bP8l.s 			page 3


  89:Core/Src/main.c **** {
  90:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END 1 */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  97:Core/Src/main.c ****   HAL_Init();
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE END Init */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Configure the system clock */
 104:Core/Src/main.c ****   SystemClock_Config();
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END SysInit */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Initialize all configured peripherals */
 111:Core/Src/main.c ****   MX_GPIO_Init();
 112:Core/Src/main.c ****   MX_ADC1_Init();
 113:Core/Src/main.c ****   MX_ADC2_Init();
 114:Core/Src/main.c ****   MX_FDCAN1_Init();
 115:Core/Src/main.c ****   MX_USART1_UART_Init();
 116:Core/Src/main.c ****   MX_TIM2_Init();
 117:Core/Src/main.c ****   MX_TIM16_Init();
 118:Core/Src/main.c ****   MX_TIM17_Init();
 119:Core/Src/main.c ****   MX_TIM1_Init();
 120:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 121:Core/Src/main.c ****   	/* Configure the FDCAN peripheral */
 122:Core/Src/main.c ****   	FDCAN_Config();
 123:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 124:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 125:Core/Src/main.c **** 	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 126:Core/Src/main.c **** 	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 127:Core/Src/main.c ****   /* USER CODE END 2 */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* Infinite loop */
 130:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 131:Core/Src/main.c **** 	while (1)
 132:Core/Src/main.c **** 	{
 133:Core/Src/main.c ****     /* USER CODE END WHILE */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 136:Core/Src/main.c **** 		/* Set the data to be transmitted */
 137:Core/Src/main.c ****         TxData[0] = ubKeyNumber;
 138:Core/Src/main.c ****         TxData[1] = 0xAD;
 139:Core/Src/main.c **** 		batata = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0);
 140:Core/Src/main.c ****         /* Start the Transmission process */
 141:Core/Src/main.c ****         // if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 142:Core/Src/main.c ****         // {
 143:Core/Src/main.c ****         //   /* Transmission request Error */
 144:Core/Src/main.c ****         //   Error_Handler();
 145:Core/Src/main.c ****         // }
ARM GAS  /tmp/ccn7bP8l.s 			page 4


 146:Core/Src/main.c **** 		/* Retrieve Rx messages from RX FIFO0 */
 147:Core/Src/main.c **** 		if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0)){
 148:Core/Src/main.c **** 			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 149:Core/Src/main.c **** 			{
 150:Core/Src/main.c **** 			Error_Handler();
 151:Core/Src/main.c **** 			}
 152:Core/Src/main.c **** 		}
 153:Core/Src/main.c **** 		//HAL_FDCAN_IRQHandler(&hfdcan1);
 154:Core/Src/main.c ****         HAL_Delay(10);
 155:Core/Src/main.c **** 		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_15);
 156:Core/Src/main.c **** 		HAL_Delay(100);
 157:Core/Src/main.c **** 	}
 158:Core/Src/main.c ****   /* USER CODE END 3 */
 159:Core/Src/main.c **** }
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** /**
 162:Core/Src/main.c ****   * @brief System Clock Configuration
 163:Core/Src/main.c ****   * @retval None
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c **** void SystemClock_Config(void)
 166:Core/Src/main.c **** {
 167:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 168:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 169:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 172:Core/Src/main.c ****   */
 173:Core/Src/main.c ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 174:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 175:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 176:Core/Src/main.c ****   */
 177:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 178:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 179:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 180:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 181:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 20;
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 186:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 187:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****     Error_Handler();
 190:Core/Src/main.c ****   }
 191:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 192:Core/Src/main.c ****   */
 193:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 194:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 195:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 196:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 201:Core/Src/main.c ****   {
 202:Core/Src/main.c ****     Error_Handler();
ARM GAS  /tmp/ccn7bP8l.s 			page 5


 203:Core/Src/main.c ****   }
 204:Core/Src/main.c ****   /** Initializes the peripherals clocks
 205:Core/Src/main.c ****   */
 206:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 207:Core/Src/main.c ****                               |RCC_PERIPHCLK_FDCAN;
 208:Core/Src/main.c ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 209:Core/Src/main.c ****   PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 210:Core/Src/main.c ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 211:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 212:Core/Src/main.c ****   {
 213:Core/Src/main.c ****     Error_Handler();
 214:Core/Src/main.c ****   }
 215:Core/Src/main.c **** }
 216:Core/Src/main.c **** 
 217:Core/Src/main.c **** /**
 218:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 219:Core/Src/main.c ****   * @param None
 220:Core/Src/main.c ****   * @retval None
 221:Core/Src/main.c ****   */
 222:Core/Src/main.c **** static void MX_ADC1_Init(void)
 223:Core/Src/main.c **** {
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   ADC_MultiModeTypeDef multimode = {0};
 230:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 235:Core/Src/main.c ****   /** Common config
 236:Core/Src/main.c ****   */
 237:Core/Src/main.c ****   hadc1.Instance = ADC1;
 238:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 239:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 240:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 241:Core/Src/main.c ****   hadc1.Init.GainCompensation = 0;
 242:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 243:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 244:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 245:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 246:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 247:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 248:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 249:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 250:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 251:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 252:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 253:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 254:Core/Src/main.c ****   {
 255:Core/Src/main.c ****     Error_Handler();
 256:Core/Src/main.c ****   }
 257:Core/Src/main.c ****   /** Configure the ADC multi-mode
 258:Core/Src/main.c ****   */
 259:Core/Src/main.c ****   multimode.Mode = ADC_MODE_INDEPENDENT;
ARM GAS  /tmp/ccn7bP8l.s 			page 6


 260:Core/Src/main.c ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 261:Core/Src/main.c ****   {
 262:Core/Src/main.c ****     Error_Handler();
 263:Core/Src/main.c ****   }
 264:Core/Src/main.c ****   /** Configure Regular Channel
 265:Core/Src/main.c ****   */
 266:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 267:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 268:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 269:Core/Src/main.c ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 270:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 271:Core/Src/main.c ****   sConfig.Offset = 0;
 272:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 279:Core/Src/main.c **** 
 280:Core/Src/main.c **** }
 281:Core/Src/main.c **** 
 282:Core/Src/main.c **** /**
 283:Core/Src/main.c ****   * @brief ADC2 Initialization Function
 284:Core/Src/main.c ****   * @param None
 285:Core/Src/main.c ****   * @retval None
 286:Core/Src/main.c ****   */
 287:Core/Src/main.c **** static void MX_ADC2_Init(void)
 288:Core/Src/main.c **** {
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 0 */
 291:Core/Src/main.c **** 
 292:Core/Src/main.c ****   /* USER CODE END ADC2_Init 0 */
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 1 */
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   /* USER CODE END ADC2_Init 1 */
 299:Core/Src/main.c ****   /** Common config
 300:Core/Src/main.c ****   */
 301:Core/Src/main.c ****   hadc2.Instance = ADC2;
 302:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 303:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 304:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 305:Core/Src/main.c ****   hadc2.Init.GainCompensation = 0;
 306:Core/Src/main.c ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 307:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 308:Core/Src/main.c ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 309:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 310:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 311:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 312:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 313:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 314:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 315:Core/Src/main.c ****   hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 316:Core/Src/main.c ****   hadc2.Init.OversamplingMode = DISABLE;
ARM GAS  /tmp/ccn7bP8l.s 			page 7


 317:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 318:Core/Src/main.c ****   {
 319:Core/Src/main.c ****     Error_Handler();
 320:Core/Src/main.c ****   }
 321:Core/Src/main.c ****   /** Configure Regular Channel
 322:Core/Src/main.c ****   */
 323:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
 324:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 325:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 326:Core/Src/main.c ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 327:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 328:Core/Src/main.c ****   sConfig.Offset = 0;
 329:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 330:Core/Src/main.c ****   {
 331:Core/Src/main.c ****     Error_Handler();
 332:Core/Src/main.c ****   }
 333:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 2 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /* USER CODE END ADC2_Init 2 */
 336:Core/Src/main.c **** 
 337:Core/Src/main.c **** }
 338:Core/Src/main.c **** 
 339:Core/Src/main.c **** /**
 340:Core/Src/main.c ****   * @brief FDCAN1 Initialization Function
 341:Core/Src/main.c ****   * @param None
 342:Core/Src/main.c ****   * @retval None
 343:Core/Src/main.c ****   */
 344:Core/Src/main.c **** static void MX_FDCAN1_Init(void)
 345:Core/Src/main.c **** {
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   /* USER CODE BEGIN FDCAN1_Init 0 */
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /* USER CODE END FDCAN1_Init 0 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* USER CODE BEGIN FDCAN1_Init 1 */
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /* USER CODE END FDCAN1_Init 1 */
 354:Core/Src/main.c ****   hfdcan1.Instance = FDCAN1;
 355:Core/Src/main.c ****   hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 356:Core/Src/main.c ****   hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 357:Core/Src/main.c ****   hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 358:Core/Src/main.c ****   hfdcan1.Init.AutoRetransmission = ENABLE;
 359:Core/Src/main.c ****   hfdcan1.Init.TransmitPause = ENABLE;
 360:Core/Src/main.c ****   hfdcan1.Init.ProtocolException = DISABLE;
 361:Core/Src/main.c ****   hfdcan1.Init.NominalPrescaler = 20;
 362:Core/Src/main.c ****   hfdcan1.Init.NominalSyncJumpWidth = 16;
 363:Core/Src/main.c ****   hfdcan1.Init.NominalTimeSeg1 = 13;
 364:Core/Src/main.c ****   hfdcan1.Init.NominalTimeSeg2 = 2;
 365:Core/Src/main.c ****   hfdcan1.Init.DataPrescaler = 20;
 366:Core/Src/main.c ****   hfdcan1.Init.DataSyncJumpWidth = 16;
 367:Core/Src/main.c ****   hfdcan1.Init.DataTimeSeg1 = 13;
 368:Core/Src/main.c ****   hfdcan1.Init.DataTimeSeg2 = 2;
 369:Core/Src/main.c ****   hfdcan1.Init.StdFiltersNbr = 1;
 370:Core/Src/main.c ****   hfdcan1.Init.ExtFiltersNbr = 0;
 371:Core/Src/main.c ****   hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 372:Core/Src/main.c ****   if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 373:Core/Src/main.c ****   {
ARM GAS  /tmp/ccn7bP8l.s 			page 8


 374:Core/Src/main.c ****     Error_Handler();
 375:Core/Src/main.c ****   }
 376:Core/Src/main.c ****   /* USER CODE BEGIN FDCAN1_Init 2 */
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****   /* USER CODE END FDCAN1_Init 2 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** }
 381:Core/Src/main.c **** 
 382:Core/Src/main.c **** /**
 383:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 384:Core/Src/main.c ****   * @param None
 385:Core/Src/main.c ****   * @retval None
 386:Core/Src/main.c ****   */
 387:Core/Src/main.c **** static void MX_TIM1_Init(void)
 388:Core/Src/main.c **** {
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 395:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 396:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 397:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 398:Core/Src/main.c **** 
 399:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 402:Core/Src/main.c ****   htim1.Instance = TIM1;
 403:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 404:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 405:Core/Src/main.c ****   htim1.Init.Period = 65535;
 406:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 407:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 408:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 409:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 410:Core/Src/main.c ****   {
 411:Core/Src/main.c ****     Error_Handler();
 412:Core/Src/main.c ****   }
 413:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 414:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 415:Core/Src/main.c ****   {
 416:Core/Src/main.c ****     Error_Handler();
 417:Core/Src/main.c ****   }
 418:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 419:Core/Src/main.c ****   {
 420:Core/Src/main.c ****     Error_Handler();
 421:Core/Src/main.c ****   }
 422:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 423:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 424:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 425:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 426:Core/Src/main.c ****   {
 427:Core/Src/main.c ****     Error_Handler();
 428:Core/Src/main.c ****   }
 429:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 430:Core/Src/main.c ****   sConfigOC.Pulse = 30000;
ARM GAS  /tmp/ccn7bP8l.s 			page 9


 431:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 432:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 433:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 434:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 435:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 436:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 437:Core/Src/main.c ****   {
 438:Core/Src/main.c ****     Error_Handler();
 439:Core/Src/main.c ****   }
 440:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 441:Core/Src/main.c ****   {
 442:Core/Src/main.c ****     Error_Handler();
 443:Core/Src/main.c ****   }
 444:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 445:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 446:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 447:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 255;
 448:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 449:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 450:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 451:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 452:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 453:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 454:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 455:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 456:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 457:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 458:Core/Src/main.c ****   {
 459:Core/Src/main.c ****     Error_Handler();
 460:Core/Src/main.c ****   }
 461:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 464:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim1);
 465:Core/Src/main.c **** 
 466:Core/Src/main.c **** }
 467:Core/Src/main.c **** 
 468:Core/Src/main.c **** /**
 469:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 470:Core/Src/main.c ****   * @param None
 471:Core/Src/main.c ****   * @retval None
 472:Core/Src/main.c ****   */
 473:Core/Src/main.c **** static void MX_TIM2_Init(void)
 474:Core/Src/main.c **** {
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 477:Core/Src/main.c **** 
 478:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 479:Core/Src/main.c **** 
 480:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 481:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 482:Core/Src/main.c **** 
 483:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 486:Core/Src/main.c ****   htim2.Instance = TIM2;
 487:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
ARM GAS  /tmp/ccn7bP8l.s 			page 10


 488:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 489:Core/Src/main.c ****   htim2.Init.Period = 4.294967295E9;
 490:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 491:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 492:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 493:Core/Src/main.c ****   {
 494:Core/Src/main.c ****     Error_Handler();
 495:Core/Src/main.c ****   }
 496:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 497:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 498:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 499:Core/Src/main.c ****   {
 500:Core/Src/main.c ****     Error_Handler();
 501:Core/Src/main.c ****   }
 502:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 503:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 504:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 505:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 506:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 507:Core/Src/main.c ****   {
 508:Core/Src/main.c ****     Error_Handler();
 509:Core/Src/main.c ****   }
 510:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 511:Core/Src/main.c ****   {
 512:Core/Src/main.c ****     Error_Handler();
 513:Core/Src/main.c ****   }
 514:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 515:Core/Src/main.c **** 
 516:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 517:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim2);
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** }
 520:Core/Src/main.c **** 
 521:Core/Src/main.c **** /**
 522:Core/Src/main.c ****   * @brief TIM16 Initialization Function
 523:Core/Src/main.c ****   * @param None
 524:Core/Src/main.c ****   * @retval None
 525:Core/Src/main.c ****   */
 526:Core/Src/main.c **** static void MX_TIM16_Init(void)
 527:Core/Src/main.c **** {
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /* USER CODE BEGIN TIM16_Init 0 */
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   /* USER CODE END TIM16_Init 0 */
 532:Core/Src/main.c **** 
 533:Core/Src/main.c ****   /* USER CODE BEGIN TIM16_Init 1 */
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   /* USER CODE END TIM16_Init 1 */
 536:Core/Src/main.c ****   htim16.Instance = TIM16;
 537:Core/Src/main.c ****   htim16.Init.Prescaler = 0;
 538:Core/Src/main.c ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 539:Core/Src/main.c ****   htim16.Init.Period = 65535;
 540:Core/Src/main.c ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 541:Core/Src/main.c ****   htim16.Init.RepetitionCounter = 0;
 542:Core/Src/main.c ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 543:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 544:Core/Src/main.c ****   {
ARM GAS  /tmp/ccn7bP8l.s 			page 11


 545:Core/Src/main.c ****     Error_Handler();
 546:Core/Src/main.c ****   }
 547:Core/Src/main.c ****   /* USER CODE BEGIN TIM16_Init 2 */
 548:Core/Src/main.c **** 
 549:Core/Src/main.c ****   /* USER CODE END TIM16_Init 2 */
 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** }
 552:Core/Src/main.c **** 
 553:Core/Src/main.c **** /**
 554:Core/Src/main.c ****   * @brief TIM17 Initialization Function
 555:Core/Src/main.c ****   * @param None
 556:Core/Src/main.c ****   * @retval None
 557:Core/Src/main.c ****   */
 558:Core/Src/main.c **** static void MX_TIM17_Init(void)
 559:Core/Src/main.c **** {
 560:Core/Src/main.c **** 
 561:Core/Src/main.c ****   /* USER CODE BEGIN TIM17_Init 0 */
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   /* USER CODE END TIM17_Init 0 */
 564:Core/Src/main.c **** 
 565:Core/Src/main.c ****   /* USER CODE BEGIN TIM17_Init 1 */
 566:Core/Src/main.c **** 
 567:Core/Src/main.c ****   /* USER CODE END TIM17_Init 1 */
 568:Core/Src/main.c ****   htim17.Instance = TIM17;
 569:Core/Src/main.c ****   htim17.Init.Prescaler = 0;
 570:Core/Src/main.c ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 571:Core/Src/main.c ****   htim17.Init.Period = 65535;
 572:Core/Src/main.c ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 573:Core/Src/main.c ****   htim17.Init.RepetitionCounter = 0;
 574:Core/Src/main.c ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 575:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 576:Core/Src/main.c ****   {
 577:Core/Src/main.c ****     Error_Handler();
 578:Core/Src/main.c ****   }
 579:Core/Src/main.c ****   /* USER CODE BEGIN TIM17_Init 2 */
 580:Core/Src/main.c **** 
 581:Core/Src/main.c ****   /* USER CODE END TIM17_Init 2 */
 582:Core/Src/main.c **** 
 583:Core/Src/main.c **** }
 584:Core/Src/main.c **** 
 585:Core/Src/main.c **** /**
 586:Core/Src/main.c ****   * @brief USART1 Initialization Function
 587:Core/Src/main.c ****   * @param None
 588:Core/Src/main.c ****   * @retval None
 589:Core/Src/main.c ****   */
 590:Core/Src/main.c **** static void MX_USART1_UART_Init(void)
 591:Core/Src/main.c **** {
 592:Core/Src/main.c **** 
 593:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 0 */
 594:Core/Src/main.c **** 
 595:Core/Src/main.c ****   /* USER CODE END USART1_Init 0 */
 596:Core/Src/main.c **** 
 597:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 1 */
 598:Core/Src/main.c **** 
 599:Core/Src/main.c ****   /* USER CODE END USART1_Init 1 */
 600:Core/Src/main.c ****   huart1.Instance = USART1;
 601:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
ARM GAS  /tmp/ccn7bP8l.s 			page 12


 602:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 603:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 604:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 605:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 606:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 607:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 608:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 609:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 610:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 611:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 612:Core/Src/main.c ****   {
 613:Core/Src/main.c ****     Error_Handler();
 614:Core/Src/main.c ****   }
 615:Core/Src/main.c ****   if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 616:Core/Src/main.c ****   {
 617:Core/Src/main.c ****     Error_Handler();
 618:Core/Src/main.c ****   }
 619:Core/Src/main.c ****   if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 620:Core/Src/main.c ****   {
 621:Core/Src/main.c ****     Error_Handler();
 622:Core/Src/main.c ****   }
 623:Core/Src/main.c ****   if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 624:Core/Src/main.c ****   {
 625:Core/Src/main.c ****     Error_Handler();
 626:Core/Src/main.c ****   }
 627:Core/Src/main.c ****   /* USER CODE BEGIN USART1_Init 2 */
 628:Core/Src/main.c **** 
 629:Core/Src/main.c ****   /* USER CODE END USART1_Init 2 */
 630:Core/Src/main.c **** 
 631:Core/Src/main.c **** }
 632:Core/Src/main.c **** 
 633:Core/Src/main.c **** /**
 634:Core/Src/main.c ****   * @brief GPIO Initialization Function
 635:Core/Src/main.c ****   * @param None
 636:Core/Src/main.c ****   * @retval None
 637:Core/Src/main.c ****   */
 638:Core/Src/main.c **** static void MX_GPIO_Init(void)
 639:Core/Src/main.c **** {
  28              		.loc 1 639 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 640:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 640 3 view .LVU1
  42              		.loc 1 640 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
ARM GAS  /tmp/ccn7bP8l.s 			page 13


  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 641:Core/Src/main.c **** 
 642:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 643:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 643 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 643 3 view .LVU4
  52              		.loc 1 643 3 view .LVU5
  53 0010 284B     		ldr	r3, .L3
  54 0012 DA6C     		ldr	r2, [r3, #76]
  55 0014 42F00402 		orr	r2, r2, #4
  56 0018 DA64     		str	r2, [r3, #76]
  57              		.loc 1 643 3 view .LVU6
  58 001a DA6C     		ldr	r2, [r3, #76]
  59 001c 02F00402 		and	r2, r2, #4
  60 0020 0192     		str	r2, [sp, #4]
  61              		.loc 1 643 3 view .LVU7
  62 0022 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 643 3 view .LVU8
 644:Core/Src/main.c ****   __HAL_RCC_GPIOG_CLK_ENABLE();
  65              		.loc 1 644 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 644 3 view .LVU10
  68              		.loc 1 644 3 view .LVU11
  69 0024 DA6C     		ldr	r2, [r3, #76]
  70 0026 42F04002 		orr	r2, r2, #64
  71 002a DA64     		str	r2, [r3, #76]
  72              		.loc 1 644 3 view .LVU12
  73 002c DA6C     		ldr	r2, [r3, #76]
  74 002e 02F04002 		and	r2, r2, #64
  75 0032 0292     		str	r2, [sp, #8]
  76              		.loc 1 644 3 view .LVU13
  77 0034 029A     		ldr	r2, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 644 3 view .LVU14
 645:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 645 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 645 3 view .LVU16
  83              		.loc 1 645 3 view .LVU17
  84 0036 DA6C     		ldr	r2, [r3, #76]
  85 0038 42F00102 		orr	r2, r2, #1
  86 003c DA64     		str	r2, [r3, #76]
  87              		.loc 1 645 3 view .LVU18
  88 003e DA6C     		ldr	r2, [r3, #76]
  89 0040 02F00102 		and	r2, r2, #1
  90 0044 0392     		str	r2, [sp, #12]
  91              		.loc 1 645 3 view .LVU19
  92 0046 039A     		ldr	r2, [sp, #12]
  93              	.LBE6:
  94              		.loc 1 645 3 view .LVU20
 646:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  95              		.loc 1 646 3 view .LVU21
  96              	.LBB7:
ARM GAS  /tmp/ccn7bP8l.s 			page 14


  97              		.loc 1 646 3 view .LVU22
  98              		.loc 1 646 3 view .LVU23
  99 0048 DA6C     		ldr	r2, [r3, #76]
 100 004a 42F00202 		orr	r2, r2, #2
 101 004e DA64     		str	r2, [r3, #76]
 102              		.loc 1 646 3 view .LVU24
 103 0050 DB6C     		ldr	r3, [r3, #76]
 104 0052 03F00203 		and	r3, r3, #2
 105 0056 0493     		str	r3, [sp, #16]
 106              		.loc 1 646 3 view .LVU25
 107 0058 049B     		ldr	r3, [sp, #16]
 108              	.LBE7:
 109              		.loc 1 646 3 view .LVU26
 647:Core/Src/main.c **** 
 648:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 649:Core/Src/main.c ****   HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 110              		.loc 1 649 3 view .LVU27
 111 005a 174D     		ldr	r5, .L3+4
 112 005c 0122     		movs	r2, #1
 113 005e 4FF48041 		mov	r1, #16384
 114 0062 2846     		mov	r0, r5
 115 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 116              	.LVL0:
 650:Core/Src/main.c **** 
 651:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 652:Core/Src/main.c ****   HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 117              		.loc 1 652 3 view .LVU28
 118 0068 2246     		mov	r2, r4
 119 006a 4FF40041 		mov	r1, #32768
 120 006e 2846     		mov	r0, r5
 121 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 122              	.LVL1:
 653:Core/Src/main.c **** 
 654:Core/Src/main.c ****   /*Configure GPIO pins : LED0_Pin LED1_Pin */
 655:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 123              		.loc 1 655 3 view .LVU29
 124              		.loc 1 655 23 is_stmt 0 view .LVU30
 125 0074 4FF44043 		mov	r3, #49152
 126 0078 0593     		str	r3, [sp, #20]
 656:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 127              		.loc 1 656 3 is_stmt 1 view .LVU31
 128              		.loc 1 656 24 is_stmt 0 view .LVU32
 129 007a 0123     		movs	r3, #1
 130 007c 0693     		str	r3, [sp, #24]
 657:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 131              		.loc 1 657 3 is_stmt 1 view .LVU33
 132              		.loc 1 657 24 is_stmt 0 view .LVU34
 133 007e 0794     		str	r4, [sp, #28]
 658:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 134              		.loc 1 658 3 is_stmt 1 view .LVU35
 135              		.loc 1 658 25 is_stmt 0 view .LVU36
 136 0080 0894     		str	r4, [sp, #32]
 659:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 137              		.loc 1 659 3 is_stmt 1 view .LVU37
 138 0082 05A9     		add	r1, sp, #20
 139 0084 2846     		mov	r0, r5
 140 0086 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/ccn7bP8l.s 			page 15


 141              	.LVL2:
 660:Core/Src/main.c **** 
 661:Core/Src/main.c ****   /*Configure GPIO pin : RESET_Pin */
 662:Core/Src/main.c ****   GPIO_InitStruct.Pin = RESET_Pin;
 142              		.loc 1 662 3 view .LVU38
 143              		.loc 1 662 23 is_stmt 0 view .LVU39
 144 008a 4FF48063 		mov	r3, #1024
 145 008e 0593     		str	r3, [sp, #20]
 663:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 146              		.loc 1 663 3 is_stmt 1 view .LVU40
 147              		.loc 1 663 24 is_stmt 0 view .LVU41
 148 0090 0694     		str	r4, [sp, #24]
 664:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 149              		.loc 1 664 3 is_stmt 1 view .LVU42
 150              		.loc 1 664 24 is_stmt 0 view .LVU43
 151 0092 0794     		str	r4, [sp, #28]
 665:Core/Src/main.c ****   HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 152              		.loc 1 665 3 is_stmt 1 view .LVU44
 153 0094 05A9     		add	r1, sp, #20
 154 0096 0948     		ldr	r0, .L3+8
 155 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL3:
 666:Core/Src/main.c **** 
 667:Core/Src/main.c ****   /*Configure GPIO pin : BOOT0_Pin */
 668:Core/Src/main.c ****   GPIO_InitStruct.Pin = BOOT0_Pin;
 157              		.loc 1 668 3 view .LVU45
 158              		.loc 1 668 23 is_stmt 0 view .LVU46
 159 009c 4FF48073 		mov	r3, #256
 160 00a0 0593     		str	r3, [sp, #20]
 669:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 161              		.loc 1 669 3 is_stmt 1 view .LVU47
 162              		.loc 1 669 24 is_stmt 0 view .LVU48
 163 00a2 0694     		str	r4, [sp, #24]
 670:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 164              		.loc 1 670 3 is_stmt 1 view .LVU49
 165              		.loc 1 670 24 is_stmt 0 view .LVU50
 166 00a4 0794     		str	r4, [sp, #28]
 671:Core/Src/main.c ****   HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 671 3 is_stmt 1 view .LVU51
 168 00a6 05A9     		add	r1, sp, #20
 169 00a8 0548     		ldr	r0, .L3+12
 170 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL4:
 672:Core/Src/main.c **** 
 673:Core/Src/main.c **** }
 172              		.loc 1 673 1 is_stmt 0 view .LVU52
 173 00ae 0BB0     		add	sp, sp, #44
 174              	.LCFI2:
 175              		.cfi_def_cfa_offset 12
 176              		@ sp needed
 177 00b0 30BD     		pop	{r4, r5, pc}
 178              	.L4:
 179 00b2 00BF     		.align	2
 180              	.L3:
 181 00b4 00100240 		.word	1073876992
 182 00b8 00080048 		.word	1207961600
 183 00bc 00180048 		.word	1207965696
ARM GAS  /tmp/ccn7bP8l.s 			page 16


 184 00c0 00040048 		.word	1207960576
 185              		.cfi_endproc
 186              	.LFE339:
 188              		.section	.text.Error_Handler,"ax",%progbits
 189              		.align	1
 190              		.global	Error_Handler
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 195              	Error_Handler:
 196              	.LFB343:
 674:Core/Src/main.c **** 
 675:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 676:Core/Src/main.c **** static void FDCAN_Config(void)
 677:Core/Src/main.c **** {
 678:Core/Src/main.c **** 	FDCAN_FilterTypeDef sFilterConfig;
 679:Core/Src/main.c **** 
 680:Core/Src/main.c **** 	/* Configure Rx filter */
 681:Core/Src/main.c **** 	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 682:Core/Src/main.c **** 	sFilterConfig.FilterIndex = 0;
 683:Core/Src/main.c **** 	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 684:Core/Src/main.c **** 	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 685:Core/Src/main.c **** 	sFilterConfig.FilterID1 = 0x00;
 686:Core/Src/main.c **** 	sFilterConfig.FilterID2 = 0x00;
 687:Core/Src/main.c **** 	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 688:Core/Src/main.c **** 	{
 689:Core/Src/main.c **** 		Error_Handler();
 690:Core/Src/main.c **** 	}
 691:Core/Src/main.c **** 
 692:Core/Src/main.c **** 	/* Configure global filter:
 693:Core/Src/main.c **** 		Filter all remote frames with STD and EXT ID
 694:Core/Src/main.c **** 		Reject non matching frames with STD ID and EXT ID */
 695:Core/Src/main.c **** 	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_
 696:Core/Src/main.c **** 	{
 697:Core/Src/main.c **** 		Error_Handler();
 698:Core/Src/main.c **** 	}
 699:Core/Src/main.c **** 
 700:Core/Src/main.c **** 	/* Start the FDCAN module */
 701:Core/Src/main.c **** 	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 702:Core/Src/main.c **** 	{
 703:Core/Src/main.c **** 		Error_Handler();
 704:Core/Src/main.c **** 	}
 705:Core/Src/main.c **** 
 706:Core/Src/main.c **** 	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 707:Core/Src/main.c **** 	{
 708:Core/Src/main.c **** 		Error_Handler();
 709:Core/Src/main.c **** 	}
 710:Core/Src/main.c **** 		if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 711:Core/Src/main.c **** 	{
 712:Core/Src/main.c **** 		Error_Handler();
 713:Core/Src/main.c **** 	}
 714:Core/Src/main.c **** 
 715:Core/Src/main.c **** 	/* Prepare Tx Header */
 716:Core/Src/main.c **** 	TxHeader.Identifier = 0x321;
 717:Core/Src/main.c **** 	TxHeader.IdType = FDCAN_STANDARD_ID;
 718:Core/Src/main.c **** 	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 719:Core/Src/main.c **** 	TxHeader.DataLength = FDCAN_DLC_BYTES_2;
ARM GAS  /tmp/ccn7bP8l.s 			page 17


 720:Core/Src/main.c **** 	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 721:Core/Src/main.c **** 	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 722:Core/Src/main.c **** 	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 723:Core/Src/main.c **** 	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 724:Core/Src/main.c **** 	TxHeader.MessageMarker = 0;
 725:Core/Src/main.c **** }
 726:Core/Src/main.c **** 
 727:Core/Src/main.c **** void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
 728:Core/Src/main.c **** {
 729:Core/Src/main.c ****   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 730:Core/Src/main.c ****   {
 731:Core/Src/main.c ****     /* Retrieve Rx messages from RX FIFO0 */
 732:Core/Src/main.c ****     if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 733:Core/Src/main.c ****     {
 734:Core/Src/main.c ****     Error_Handler();
 735:Core/Src/main.c ****     }
 736:Core/Src/main.c **** 	
 737:Core/Src/main.c **** 	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 738:Core/Src/main.c ****   }
 739:Core/Src/main.c **** }
 740:Core/Src/main.c **** void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 741:Core/Src/main.c **** {
 742:Core/Src/main.c ****   if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 743:Core/Src/main.c ****   {
 744:Core/Src/main.c ****     /* Retrieve Rx messages from RX FIFO0 */
 745:Core/Src/main.c ****     if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 746:Core/Src/main.c ****     {
 747:Core/Src/main.c ****     Error_Handler();
 748:Core/Src/main.c ****     }
 749:Core/Src/main.c **** 
 750:Core/Src/main.c **** 	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 751:Core/Src/main.c ****   }
 752:Core/Src/main.c **** }
 753:Core/Src/main.c **** 
 754:Core/Src/main.c **** /* USER CODE END 4 */
 755:Core/Src/main.c **** 
 756:Core/Src/main.c **** /**
 757:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 758:Core/Src/main.c ****   * @retval None
 759:Core/Src/main.c ****   */
 760:Core/Src/main.c **** void Error_Handler(void)
 761:Core/Src/main.c **** {
 197              		.loc 1 761 1 is_stmt 1 view -0
 198              		.cfi_startproc
 199              		@ Volatile: function does not return.
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 762:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 763:Core/Src/main.c **** 	/* User can add his own implementation to report the HAL error return state */
 764:Core/Src/main.c **** 	__disable_irq();
 203              		.loc 1 764 2 view .LVU54
 204              	.LBB8:
 205              	.LBI8:
 206              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  /tmp/ccn7bP8l.s 			page 18


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  /tmp/ccn7bP8l.s 			page 19


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
ARM GAS  /tmp/ccn7bP8l.s 			page 20


 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
ARM GAS  /tmp/ccn7bP8l.s 			page 21


 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 207              		.loc 2 207 27 view .LVU55
 208              	.LBB9:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 209              		.loc 2 209 3 view .LVU56
 210              		.syntax unified
 211              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 212 0000 72B6     		cpsid i
 213              	@ 0 "" 2
 214              		.thumb
 215              		.syntax unified
 216              	.L6:
 217              	.LBE9:
 218              	.LBE8:
 765:Core/Src/main.c **** 	while (1)
 219              		.loc 1 765 2 discriminator 1 view .LVU57
 766:Core/Src/main.c **** 	{
 767:Core/Src/main.c **** 	}
 220              		.loc 1 767 2 discriminator 1 view .LVU58
 765:Core/Src/main.c **** 	while (1)
 221              		.loc 1 765 8 discriminator 1 view .LVU59
 222 0002 FEE7     		b	.L6
 223              		.cfi_endproc
ARM GAS  /tmp/ccn7bP8l.s 			page 22


 224              	.LFE343:
 226              		.section	.text.MX_ADC1_Init,"ax",%progbits
 227              		.align	1
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 232              	MX_ADC1_Init:
 233              	.LFB331:
 223:Core/Src/main.c **** 
 234              		.loc 1 223 1 view -0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 48
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238 0000 10B5     		push	{r4, lr}
 239              	.LCFI3:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 4, -8
 242              		.cfi_offset 14, -4
 243 0002 8CB0     		sub	sp, sp, #48
 244              	.LCFI4:
 245              		.cfi_def_cfa_offset 56
 229:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 246              		.loc 1 229 3 view .LVU61
 229:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 247              		.loc 1 229 24 is_stmt 0 view .LVU62
 248 0004 0024     		movs	r4, #0
 249 0006 0994     		str	r4, [sp, #36]
 250 0008 0A94     		str	r4, [sp, #40]
 251 000a 0B94     		str	r4, [sp, #44]
 230:Core/Src/main.c **** 
 252              		.loc 1 230 3 is_stmt 1 view .LVU63
 230:Core/Src/main.c **** 
 253              		.loc 1 230 26 is_stmt 0 view .LVU64
 254 000c 2022     		movs	r2, #32
 255 000e 2146     		mov	r1, r4
 256 0010 01A8     		add	r0, sp, #4
 257 0012 FFF7FEFF 		bl	memset
 258              	.LVL5:
 237:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 259              		.loc 1 237 3 is_stmt 1 view .LVU65
 237:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 260              		.loc 1 237 18 is_stmt 0 view .LVU66
 261 0016 1E48     		ldr	r0, .L15
 262 0018 4FF0A043 		mov	r3, #1342177280
 263 001c 0360     		str	r3, [r0]
 238:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 264              		.loc 1 238 3 is_stmt 1 view .LVU67
 238:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 265              		.loc 1 238 29 is_stmt 0 view .LVU68
 266 001e 4FF44033 		mov	r3, #196608
 267 0022 4360     		str	r3, [r0, #4]
 239:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 268              		.loc 1 239 3 is_stmt 1 view .LVU69
 239:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 269              		.loc 1 239 25 is_stmt 0 view .LVU70
 270 0024 8460     		str	r4, [r0, #8]
 240:Core/Src/main.c ****   hadc1.Init.GainCompensation = 0;
ARM GAS  /tmp/ccn7bP8l.s 			page 23


 271              		.loc 1 240 3 is_stmt 1 view .LVU71
 240:Core/Src/main.c ****   hadc1.Init.GainCompensation = 0;
 272              		.loc 1 240 24 is_stmt 0 view .LVU72
 273 0026 C460     		str	r4, [r0, #12]
 241:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 274              		.loc 1 241 3 is_stmt 1 view .LVU73
 241:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 275              		.loc 1 241 31 is_stmt 0 view .LVU74
 276 0028 0461     		str	r4, [r0, #16]
 242:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 277              		.loc 1 242 3 is_stmt 1 view .LVU75
 242:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 278              		.loc 1 242 27 is_stmt 0 view .LVU76
 279 002a 4461     		str	r4, [r0, #20]
 243:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 280              		.loc 1 243 3 is_stmt 1 view .LVU77
 243:Core/Src/main.c ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 281              		.loc 1 243 27 is_stmt 0 view .LVU78
 282 002c 0423     		movs	r3, #4
 283 002e 8361     		str	r3, [r0, #24]
 244:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 284              		.loc 1 244 3 is_stmt 1 view .LVU79
 244:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 285              		.loc 1 244 31 is_stmt 0 view .LVU80
 286 0030 0477     		strb	r4, [r0, #28]
 245:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 287              		.loc 1 245 3 is_stmt 1 view .LVU81
 245:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 288              		.loc 1 245 33 is_stmt 0 view .LVU82
 289 0032 4477     		strb	r4, [r0, #29]
 246:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 290              		.loc 1 246 3 is_stmt 1 view .LVU83
 246:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 291              		.loc 1 246 30 is_stmt 0 view .LVU84
 292 0034 0123     		movs	r3, #1
 293 0036 0362     		str	r3, [r0, #32]
 247:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 294              		.loc 1 247 3 is_stmt 1 view .LVU85
 247:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 295              		.loc 1 247 36 is_stmt 0 view .LVU86
 296 0038 80F82440 		strb	r4, [r0, #36]
 248:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 297              		.loc 1 248 3 is_stmt 1 view .LVU87
 248:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 298              		.loc 1 248 31 is_stmt 0 view .LVU88
 299 003c C462     		str	r4, [r0, #44]
 249:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 300              		.loc 1 249 3 is_stmt 1 view .LVU89
 249:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 301              		.loc 1 249 35 is_stmt 0 view .LVU90
 302 003e 0463     		str	r4, [r0, #48]
 250:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 303              		.loc 1 250 3 is_stmt 1 view .LVU91
 250:Core/Src/main.c ****   hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 304              		.loc 1 250 36 is_stmt 0 view .LVU92
 305 0040 80F83840 		strb	r4, [r0, #56]
 251:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
ARM GAS  /tmp/ccn7bP8l.s 			page 24


 306              		.loc 1 251 3 is_stmt 1 view .LVU93
 251:Core/Src/main.c ****   hadc1.Init.OversamplingMode = DISABLE;
 307              		.loc 1 251 22 is_stmt 0 view .LVU94
 308 0044 C463     		str	r4, [r0, #60]
 252:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 309              		.loc 1 252 3 is_stmt 1 view .LVU95
 252:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 310              		.loc 1 252 31 is_stmt 0 view .LVU96
 311 0046 80F84040 		strb	r4, [r0, #64]
 253:Core/Src/main.c ****   {
 312              		.loc 1 253 3 is_stmt 1 view .LVU97
 253:Core/Src/main.c ****   {
 313              		.loc 1 253 7 is_stmt 0 view .LVU98
 314 004a FFF7FEFF 		bl	HAL_ADC_Init
 315              	.LVL6:
 253:Core/Src/main.c ****   {
 316              		.loc 1 253 6 view .LVU99
 317 004e C8B9     		cbnz	r0, .L12
 259:Core/Src/main.c ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 318              		.loc 1 259 3 is_stmt 1 view .LVU100
 259:Core/Src/main.c ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 319              		.loc 1 259 18 is_stmt 0 view .LVU101
 320 0050 0023     		movs	r3, #0
 321 0052 0993     		str	r3, [sp, #36]
 260:Core/Src/main.c ****   {
 322              		.loc 1 260 3 is_stmt 1 view .LVU102
 260:Core/Src/main.c ****   {
 323              		.loc 1 260 7 is_stmt 0 view .LVU103
 324 0054 09A9     		add	r1, sp, #36
 325 0056 0E48     		ldr	r0, .L15
 326 0058 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 327              	.LVL7:
 260:Core/Src/main.c ****   {
 328              		.loc 1 260 6 view .LVU104
 329 005c A0B9     		cbnz	r0, .L13
 266:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 330              		.loc 1 266 3 is_stmt 1 view .LVU105
 266:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 331              		.loc 1 266 19 is_stmt 0 view .LVU106
 332 005e 0D4B     		ldr	r3, .L15+4
 333 0060 0193     		str	r3, [sp, #4]
 267:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 334              		.loc 1 267 3 is_stmt 1 view .LVU107
 267:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 335              		.loc 1 267 16 is_stmt 0 view .LVU108
 336 0062 0623     		movs	r3, #6
 337 0064 0293     		str	r3, [sp, #8]
 268:Core/Src/main.c ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 338              		.loc 1 268 3 is_stmt 1 view .LVU109
 268:Core/Src/main.c ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 339              		.loc 1 268 24 is_stmt 0 view .LVU110
 340 0066 0023     		movs	r3, #0
 341 0068 0393     		str	r3, [sp, #12]
 269:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 342              		.loc 1 269 3 is_stmt 1 view .LVU111
 269:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 343              		.loc 1 269 22 is_stmt 0 view .LVU112
ARM GAS  /tmp/ccn7bP8l.s 			page 25


 344 006a 0B4A     		ldr	r2, .L15+8
 345 006c 0492     		str	r2, [sp, #16]
 270:Core/Src/main.c ****   sConfig.Offset = 0;
 346              		.loc 1 270 3 is_stmt 1 view .LVU113
 270:Core/Src/main.c ****   sConfig.Offset = 0;
 347              		.loc 1 270 24 is_stmt 0 view .LVU114
 348 006e 0422     		movs	r2, #4
 349 0070 0592     		str	r2, [sp, #20]
 271:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 350              		.loc 1 271 3 is_stmt 1 view .LVU115
 271:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 351              		.loc 1 271 18 is_stmt 0 view .LVU116
 352 0072 0693     		str	r3, [sp, #24]
 272:Core/Src/main.c ****   {
 353              		.loc 1 272 3 is_stmt 1 view .LVU117
 272:Core/Src/main.c ****   {
 354              		.loc 1 272 7 is_stmt 0 view .LVU118
 355 0074 0DEB0201 		add	r1, sp, r2
 356 0078 0548     		ldr	r0, .L15
 357 007a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 358              	.LVL8:
 272:Core/Src/main.c ****   {
 359              		.loc 1 272 6 view .LVU119
 360 007e 28B9     		cbnz	r0, .L14
 280:Core/Src/main.c **** 
 361              		.loc 1 280 1 view .LVU120
 362 0080 0CB0     		add	sp, sp, #48
 363              	.LCFI5:
 364              		.cfi_remember_state
 365              		.cfi_def_cfa_offset 8
 366              		@ sp needed
 367 0082 10BD     		pop	{r4, pc}
 368              	.L12:
 369              	.LCFI6:
 370              		.cfi_restore_state
 255:Core/Src/main.c ****   }
 371              		.loc 1 255 5 is_stmt 1 view .LVU121
 372 0084 FFF7FEFF 		bl	Error_Handler
 373              	.LVL9:
 374              	.L13:
 262:Core/Src/main.c ****   }
 375              		.loc 1 262 5 view .LVU122
 376 0088 FFF7FEFF 		bl	Error_Handler
 377              	.LVL10:
 378              	.L14:
 274:Core/Src/main.c ****   }
 379              		.loc 1 274 5 view .LVU123
 380 008c FFF7FEFF 		bl	Error_Handler
 381              	.LVL11:
 382              	.L16:
 383              		.align	2
 384              	.L15:
 385 0090 00000000 		.word	.LANCHOR0
 386 0094 02003004 		.word	70254594
 387 0098 00007F40 		.word	1082064896
 388              		.cfi_endproc
 389              	.LFE331:
ARM GAS  /tmp/ccn7bP8l.s 			page 26


 391              		.section	.text.MX_ADC2_Init,"ax",%progbits
 392              		.align	1
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 397              	MX_ADC2_Init:
 398              	.LFB332:
 288:Core/Src/main.c **** 
 399              		.loc 1 288 1 view -0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 32
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403 0000 00B5     		push	{lr}
 404              	.LCFI7:
 405              		.cfi_def_cfa_offset 4
 406              		.cfi_offset 14, -4
 407 0002 89B0     		sub	sp, sp, #36
 408              	.LCFI8:
 409              		.cfi_def_cfa_offset 40
 294:Core/Src/main.c **** 
 410              		.loc 1 294 3 view .LVU125
 294:Core/Src/main.c **** 
 411              		.loc 1 294 26 is_stmt 0 view .LVU126
 412 0004 2022     		movs	r2, #32
 413 0006 0021     		movs	r1, #0
 414 0008 6846     		mov	r0, sp
 415 000a FFF7FEFF 		bl	memset
 416              	.LVL12:
 301:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 417              		.loc 1 301 3 is_stmt 1 view .LVU127
 301:Core/Src/main.c ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 418              		.loc 1 301 18 is_stmt 0 view .LVU128
 419 000e 1A48     		ldr	r0, .L23
 420 0010 1A4B     		ldr	r3, .L23+4
 421 0012 0360     		str	r3, [r0]
 302:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 422              		.loc 1 302 3 is_stmt 1 view .LVU129
 302:Core/Src/main.c ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 423              		.loc 1 302 29 is_stmt 0 view .LVU130
 424 0014 4FF44033 		mov	r3, #196608
 425 0018 4360     		str	r3, [r0, #4]
 303:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 426              		.loc 1 303 3 is_stmt 1 view .LVU131
 303:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 427              		.loc 1 303 25 is_stmt 0 view .LVU132
 428 001a 0023     		movs	r3, #0
 429 001c 8360     		str	r3, [r0, #8]
 304:Core/Src/main.c ****   hadc2.Init.GainCompensation = 0;
 430              		.loc 1 304 3 is_stmt 1 view .LVU133
 304:Core/Src/main.c ****   hadc2.Init.GainCompensation = 0;
 431              		.loc 1 304 24 is_stmt 0 view .LVU134
 432 001e C360     		str	r3, [r0, #12]
 305:Core/Src/main.c ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 433              		.loc 1 305 3 is_stmt 1 view .LVU135
 305:Core/Src/main.c ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 434              		.loc 1 305 31 is_stmt 0 view .LVU136
 435 0020 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/ccn7bP8l.s 			page 27


 306:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 436              		.loc 1 306 3 is_stmt 1 view .LVU137
 306:Core/Src/main.c ****   hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 437              		.loc 1 306 27 is_stmt 0 view .LVU138
 438 0022 4361     		str	r3, [r0, #20]
 307:Core/Src/main.c ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 439              		.loc 1 307 3 is_stmt 1 view .LVU139
 307:Core/Src/main.c ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 440              		.loc 1 307 27 is_stmt 0 view .LVU140
 441 0024 0422     		movs	r2, #4
 442 0026 8261     		str	r2, [r0, #24]
 308:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 443              		.loc 1 308 3 is_stmt 1 view .LVU141
 308:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 444              		.loc 1 308 31 is_stmt 0 view .LVU142
 445 0028 0377     		strb	r3, [r0, #28]
 309:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 446              		.loc 1 309 3 is_stmt 1 view .LVU143
 309:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 447              		.loc 1 309 33 is_stmt 0 view .LVU144
 448 002a 4377     		strb	r3, [r0, #29]
 310:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 449              		.loc 1 310 3 is_stmt 1 view .LVU145
 310:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 450              		.loc 1 310 30 is_stmt 0 view .LVU146
 451 002c 0122     		movs	r2, #1
 452 002e 0262     		str	r2, [r0, #32]
 311:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 453              		.loc 1 311 3 is_stmt 1 view .LVU147
 311:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 454              		.loc 1 311 36 is_stmt 0 view .LVU148
 455 0030 80F82430 		strb	r3, [r0, #36]
 312:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 456              		.loc 1 312 3 is_stmt 1 view .LVU149
 312:Core/Src/main.c ****   hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 457              		.loc 1 312 31 is_stmt 0 view .LVU150
 458 0034 C362     		str	r3, [r0, #44]
 313:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 459              		.loc 1 313 3 is_stmt 1 view .LVU151
 313:Core/Src/main.c ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 460              		.loc 1 313 35 is_stmt 0 view .LVU152
 461 0036 0363     		str	r3, [r0, #48]
 314:Core/Src/main.c ****   hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 462              		.loc 1 314 3 is_stmt 1 view .LVU153
 314:Core/Src/main.c ****   hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 463              		.loc 1 314 36 is_stmt 0 view .LVU154
 464 0038 80F83830 		strb	r3, [r0, #56]
 315:Core/Src/main.c ****   hadc2.Init.OversamplingMode = DISABLE;
 465              		.loc 1 315 3 is_stmt 1 view .LVU155
 315:Core/Src/main.c ****   hadc2.Init.OversamplingMode = DISABLE;
 466              		.loc 1 315 22 is_stmt 0 view .LVU156
 467 003c C363     		str	r3, [r0, #60]
 316:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 468              		.loc 1 316 3 is_stmt 1 view .LVU157
 316:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 469              		.loc 1 316 31 is_stmt 0 view .LVU158
 470 003e 80F84030 		strb	r3, [r0, #64]
ARM GAS  /tmp/ccn7bP8l.s 			page 28


 317:Core/Src/main.c ****   {
 471              		.loc 1 317 3 is_stmt 1 view .LVU159
 317:Core/Src/main.c ****   {
 472              		.loc 1 317 7 is_stmt 0 view .LVU160
 473 0042 FFF7FEFF 		bl	HAL_ADC_Init
 474              	.LVL13:
 317:Core/Src/main.c ****   {
 475              		.loc 1 317 6 view .LVU161
 476 0046 90B9     		cbnz	r0, .L21
 323:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 477              		.loc 1 323 3 is_stmt 1 view .LVU162
 323:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 478              		.loc 1 323 19 is_stmt 0 view .LVU163
 479 0048 0D4B     		ldr	r3, .L23+8
 480 004a 0093     		str	r3, [sp]
 324:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 481              		.loc 1 324 3 is_stmt 1 view .LVU164
 324:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 482              		.loc 1 324 16 is_stmt 0 view .LVU165
 483 004c 0623     		movs	r3, #6
 484 004e 0193     		str	r3, [sp, #4]
 325:Core/Src/main.c ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 485              		.loc 1 325 3 is_stmt 1 view .LVU166
 325:Core/Src/main.c ****   sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 486              		.loc 1 325 24 is_stmt 0 view .LVU167
 487 0050 0023     		movs	r3, #0
 488 0052 0293     		str	r3, [sp, #8]
 326:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 489              		.loc 1 326 3 is_stmt 1 view .LVU168
 326:Core/Src/main.c ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 490              		.loc 1 326 22 is_stmt 0 view .LVU169
 491 0054 0B4A     		ldr	r2, .L23+12
 492 0056 0392     		str	r2, [sp, #12]
 327:Core/Src/main.c ****   sConfig.Offset = 0;
 493              		.loc 1 327 3 is_stmt 1 view .LVU170
 327:Core/Src/main.c ****   sConfig.Offset = 0;
 494              		.loc 1 327 24 is_stmt 0 view .LVU171
 495 0058 0422     		movs	r2, #4
 496 005a 0492     		str	r2, [sp, #16]
 328:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 497              		.loc 1 328 3 is_stmt 1 view .LVU172
 328:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 498              		.loc 1 328 18 is_stmt 0 view .LVU173
 499 005c 0593     		str	r3, [sp, #20]
 329:Core/Src/main.c ****   {
 500              		.loc 1 329 3 is_stmt 1 view .LVU174
 329:Core/Src/main.c ****   {
 501              		.loc 1 329 7 is_stmt 0 view .LVU175
 502 005e 6946     		mov	r1, sp
 503 0060 0548     		ldr	r0, .L23
 504 0062 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 505              	.LVL14:
 329:Core/Src/main.c ****   {
 506              		.loc 1 329 6 view .LVU176
 507 0066 20B9     		cbnz	r0, .L22
 337:Core/Src/main.c **** 
 508              		.loc 1 337 1 view .LVU177
ARM GAS  /tmp/ccn7bP8l.s 			page 29


 509 0068 09B0     		add	sp, sp, #36
 510              	.LCFI9:
 511              		.cfi_remember_state
 512              		.cfi_def_cfa_offset 4
 513              		@ sp needed
 514 006a 5DF804FB 		ldr	pc, [sp], #4
 515              	.L21:
 516              	.LCFI10:
 517              		.cfi_restore_state
 319:Core/Src/main.c ****   }
 518              		.loc 1 319 5 is_stmt 1 view .LVU178
 519 006e FFF7FEFF 		bl	Error_Handler
 520              	.LVL15:
 521              	.L22:
 331:Core/Src/main.c ****   }
 522              		.loc 1 331 5 view .LVU179
 523 0072 FFF7FEFF 		bl	Error_Handler
 524              	.LVL16:
 525              	.L24:
 526 0076 00BF     		.align	2
 527              	.L23:
 528 0078 00000000 		.word	.LANCHOR1
 529 007c 00010050 		.word	1342177536
 530 0080 0800900C 		.word	210763784
 531 0084 00007F40 		.word	1082064896
 532              		.cfi_endproc
 533              	.LFE332:
 535              		.section	.text.MX_FDCAN1_Init,"ax",%progbits
 536              		.align	1
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 541              	MX_FDCAN1_Init:
 542              	.LFB333:
 345:Core/Src/main.c **** 
 543              		.loc 1 345 1 view -0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547 0000 70B5     		push	{r4, r5, r6, lr}
 548              	.LCFI11:
 549              		.cfi_def_cfa_offset 16
 550              		.cfi_offset 4, -16
 551              		.cfi_offset 5, -12
 552              		.cfi_offset 6, -8
 553              		.cfi_offset 14, -4
 354:Core/Src/main.c ****   hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 554              		.loc 1 354 3 view .LVU181
 354:Core/Src/main.c ****   hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 555              		.loc 1 354 20 is_stmt 0 view .LVU182
 556 0002 1048     		ldr	r0, .L29
 557 0004 104B     		ldr	r3, .L29+4
 558 0006 0360     		str	r3, [r0]
 355:Core/Src/main.c ****   hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 559              		.loc 1 355 3 is_stmt 1 view .LVU183
 355:Core/Src/main.c ****   hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 560              		.loc 1 355 29 is_stmt 0 view .LVU184
ARM GAS  /tmp/ccn7bP8l.s 			page 30


 561 0008 0023     		movs	r3, #0
 562 000a 4360     		str	r3, [r0, #4]
 356:Core/Src/main.c ****   hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 563              		.loc 1 356 3 is_stmt 1 view .LVU185
 356:Core/Src/main.c ****   hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 564              		.loc 1 356 28 is_stmt 0 view .LVU186
 565 000c 8360     		str	r3, [r0, #8]
 357:Core/Src/main.c ****   hfdcan1.Init.AutoRetransmission = ENABLE;
 566              		.loc 1 357 3 is_stmt 1 view .LVU187
 357:Core/Src/main.c ****   hfdcan1.Init.AutoRetransmission = ENABLE;
 567              		.loc 1 357 21 is_stmt 0 view .LVU188
 568 000e C360     		str	r3, [r0, #12]
 358:Core/Src/main.c ****   hfdcan1.Init.TransmitPause = ENABLE;
 569              		.loc 1 358 3 is_stmt 1 view .LVU189
 358:Core/Src/main.c ****   hfdcan1.Init.TransmitPause = ENABLE;
 570              		.loc 1 358 35 is_stmt 0 view .LVU190
 571 0010 0122     		movs	r2, #1
 572 0012 0274     		strb	r2, [r0, #16]
 359:Core/Src/main.c ****   hfdcan1.Init.ProtocolException = DISABLE;
 573              		.loc 1 359 3 is_stmt 1 view .LVU191
 359:Core/Src/main.c ****   hfdcan1.Init.ProtocolException = DISABLE;
 574              		.loc 1 359 30 is_stmt 0 view .LVU192
 575 0014 4274     		strb	r2, [r0, #17]
 360:Core/Src/main.c ****   hfdcan1.Init.NominalPrescaler = 20;
 576              		.loc 1 360 3 is_stmt 1 view .LVU193
 360:Core/Src/main.c ****   hfdcan1.Init.NominalPrescaler = 20;
 577              		.loc 1 360 34 is_stmt 0 view .LVU194
 578 0016 8374     		strb	r3, [r0, #18]
 361:Core/Src/main.c ****   hfdcan1.Init.NominalSyncJumpWidth = 16;
 579              		.loc 1 361 3 is_stmt 1 view .LVU195
 361:Core/Src/main.c ****   hfdcan1.Init.NominalSyncJumpWidth = 16;
 580              		.loc 1 361 33 is_stmt 0 view .LVU196
 581 0018 1426     		movs	r6, #20
 582 001a 4661     		str	r6, [r0, #20]
 362:Core/Src/main.c ****   hfdcan1.Init.NominalTimeSeg1 = 13;
 583              		.loc 1 362 3 is_stmt 1 view .LVU197
 362:Core/Src/main.c ****   hfdcan1.Init.NominalTimeSeg1 = 13;
 584              		.loc 1 362 37 is_stmt 0 view .LVU198
 585 001c 1025     		movs	r5, #16
 586 001e 8561     		str	r5, [r0, #24]
 363:Core/Src/main.c ****   hfdcan1.Init.NominalTimeSeg2 = 2;
 587              		.loc 1 363 3 is_stmt 1 view .LVU199
 363:Core/Src/main.c ****   hfdcan1.Init.NominalTimeSeg2 = 2;
 588              		.loc 1 363 32 is_stmt 0 view .LVU200
 589 0020 0D24     		movs	r4, #13
 590 0022 C461     		str	r4, [r0, #28]
 364:Core/Src/main.c ****   hfdcan1.Init.DataPrescaler = 20;
 591              		.loc 1 364 3 is_stmt 1 view .LVU201
 364:Core/Src/main.c ****   hfdcan1.Init.DataPrescaler = 20;
 592              		.loc 1 364 32 is_stmt 0 view .LVU202
 593 0024 0221     		movs	r1, #2
 594 0026 0162     		str	r1, [r0, #32]
 365:Core/Src/main.c ****   hfdcan1.Init.DataSyncJumpWidth = 16;
 595              		.loc 1 365 3 is_stmt 1 view .LVU203
 365:Core/Src/main.c ****   hfdcan1.Init.DataSyncJumpWidth = 16;
 596              		.loc 1 365 30 is_stmt 0 view .LVU204
 597 0028 4662     		str	r6, [r0, #36]
ARM GAS  /tmp/ccn7bP8l.s 			page 31


 366:Core/Src/main.c ****   hfdcan1.Init.DataTimeSeg1 = 13;
 598              		.loc 1 366 3 is_stmt 1 view .LVU205
 366:Core/Src/main.c ****   hfdcan1.Init.DataTimeSeg1 = 13;
 599              		.loc 1 366 34 is_stmt 0 view .LVU206
 600 002a 8562     		str	r5, [r0, #40]
 367:Core/Src/main.c ****   hfdcan1.Init.DataTimeSeg2 = 2;
 601              		.loc 1 367 3 is_stmt 1 view .LVU207
 367:Core/Src/main.c ****   hfdcan1.Init.DataTimeSeg2 = 2;
 602              		.loc 1 367 29 is_stmt 0 view .LVU208
 603 002c C462     		str	r4, [r0, #44]
 368:Core/Src/main.c ****   hfdcan1.Init.StdFiltersNbr = 1;
 604              		.loc 1 368 3 is_stmt 1 view .LVU209
 368:Core/Src/main.c ****   hfdcan1.Init.StdFiltersNbr = 1;
 605              		.loc 1 368 29 is_stmt 0 view .LVU210
 606 002e 0163     		str	r1, [r0, #48]
 369:Core/Src/main.c ****   hfdcan1.Init.ExtFiltersNbr = 0;
 607              		.loc 1 369 3 is_stmt 1 view .LVU211
 369:Core/Src/main.c ****   hfdcan1.Init.ExtFiltersNbr = 0;
 608              		.loc 1 369 30 is_stmt 0 view .LVU212
 609 0030 4263     		str	r2, [r0, #52]
 370:Core/Src/main.c ****   hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 610              		.loc 1 370 3 is_stmt 1 view .LVU213
 370:Core/Src/main.c ****   hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 611              		.loc 1 370 30 is_stmt 0 view .LVU214
 612 0032 8363     		str	r3, [r0, #56]
 371:Core/Src/main.c ****   if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 613              		.loc 1 371 3 is_stmt 1 view .LVU215
 371:Core/Src/main.c ****   if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 614              		.loc 1 371 32 is_stmt 0 view .LVU216
 615 0034 C363     		str	r3, [r0, #60]
 372:Core/Src/main.c ****   {
 616              		.loc 1 372 3 is_stmt 1 view .LVU217
 372:Core/Src/main.c ****   {
 617              		.loc 1 372 7 is_stmt 0 view .LVU218
 618 0036 FFF7FEFF 		bl	HAL_FDCAN_Init
 619              	.LVL17:
 372:Core/Src/main.c ****   {
 620              		.loc 1 372 6 view .LVU219
 621 003a 00B9     		cbnz	r0, .L28
 380:Core/Src/main.c **** 
 622              		.loc 1 380 1 view .LVU220
 623 003c 70BD     		pop	{r4, r5, r6, pc}
 624              	.L28:
 374:Core/Src/main.c ****   }
 625              		.loc 1 374 5 is_stmt 1 view .LVU221
 626 003e FFF7FEFF 		bl	Error_Handler
 627              	.LVL18:
 628              	.L30:
 629 0042 00BF     		.align	2
 630              	.L29:
 631 0044 00000000 		.word	.LANCHOR2
 632 0048 00640040 		.word	1073767424
 633              		.cfi_endproc
 634              	.LFE333:
 636              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 637              		.align	1
 638              		.syntax unified
ARM GAS  /tmp/ccn7bP8l.s 			page 32


 639              		.thumb
 640              		.thumb_func
 642              	MX_USART1_UART_Init:
 643              	.LFB338:
 591:Core/Src/main.c **** 
 644              		.loc 1 591 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648 0000 08B5     		push	{r3, lr}
 649              	.LCFI12:
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 3, -8
 652              		.cfi_offset 14, -4
 600:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 653              		.loc 1 600 3 view .LVU223
 600:Core/Src/main.c ****   huart1.Init.BaudRate = 115200;
 654              		.loc 1 600 19 is_stmt 0 view .LVU224
 655 0002 1548     		ldr	r0, .L41
 656 0004 154B     		ldr	r3, .L41+4
 657 0006 0360     		str	r3, [r0]
 601:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 658              		.loc 1 601 3 is_stmt 1 view .LVU225
 601:Core/Src/main.c ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 659              		.loc 1 601 24 is_stmt 0 view .LVU226
 660 0008 4FF4E133 		mov	r3, #115200
 661 000c 4360     		str	r3, [r0, #4]
 602:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 662              		.loc 1 602 3 is_stmt 1 view .LVU227
 602:Core/Src/main.c ****   huart1.Init.StopBits = UART_STOPBITS_1;
 663              		.loc 1 602 26 is_stmt 0 view .LVU228
 664 000e 0023     		movs	r3, #0
 665 0010 8360     		str	r3, [r0, #8]
 603:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 666              		.loc 1 603 3 is_stmt 1 view .LVU229
 603:Core/Src/main.c ****   huart1.Init.Parity = UART_PARITY_NONE;
 667              		.loc 1 603 24 is_stmt 0 view .LVU230
 668 0012 C360     		str	r3, [r0, #12]
 604:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 669              		.loc 1 604 3 is_stmt 1 view .LVU231
 604:Core/Src/main.c ****   huart1.Init.Mode = UART_MODE_TX_RX;
 670              		.loc 1 604 22 is_stmt 0 view .LVU232
 671 0014 0361     		str	r3, [r0, #16]
 605:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 672              		.loc 1 605 3 is_stmt 1 view .LVU233
 605:Core/Src/main.c ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 673              		.loc 1 605 20 is_stmt 0 view .LVU234
 674 0016 0C22     		movs	r2, #12
 675 0018 4261     		str	r2, [r0, #20]
 606:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 676              		.loc 1 606 3 is_stmt 1 view .LVU235
 606:Core/Src/main.c ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 677              		.loc 1 606 25 is_stmt 0 view .LVU236
 678 001a 8361     		str	r3, [r0, #24]
 607:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 679              		.loc 1 607 3 is_stmt 1 view .LVU237
 607:Core/Src/main.c ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
ARM GAS  /tmp/ccn7bP8l.s 			page 33


 680              		.loc 1 607 28 is_stmt 0 view .LVU238
 681 001c C361     		str	r3, [r0, #28]
 608:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 682              		.loc 1 608 3 is_stmt 1 view .LVU239
 608:Core/Src/main.c ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 683              		.loc 1 608 30 is_stmt 0 view .LVU240
 684 001e 0362     		str	r3, [r0, #32]
 609:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 685              		.loc 1 609 3 is_stmt 1 view .LVU241
 609:Core/Src/main.c ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 686              		.loc 1 609 30 is_stmt 0 view .LVU242
 687 0020 4362     		str	r3, [r0, #36]
 610:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 688              		.loc 1 610 3 is_stmt 1 view .LVU243
 610:Core/Src/main.c ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 689              		.loc 1 610 38 is_stmt 0 view .LVU244
 690 0022 8362     		str	r3, [r0, #40]
 611:Core/Src/main.c ****   {
 691              		.loc 1 611 3 is_stmt 1 view .LVU245
 611:Core/Src/main.c ****   {
 692              		.loc 1 611 7 is_stmt 0 view .LVU246
 693 0024 FFF7FEFF 		bl	HAL_UART_Init
 694              	.LVL19:
 611:Core/Src/main.c ****   {
 695              		.loc 1 611 6 view .LVU247
 696 0028 70B9     		cbnz	r0, .L37
 615:Core/Src/main.c ****   {
 697              		.loc 1 615 3 is_stmt 1 view .LVU248
 615:Core/Src/main.c ****   {
 698              		.loc 1 615 7 is_stmt 0 view .LVU249
 699 002a 0021     		movs	r1, #0
 700 002c 0A48     		ldr	r0, .L41
 701 002e FFF7FEFF 		bl	HAL_UARTEx_SetTxFifoThreshold
 702              	.LVL20:
 615:Core/Src/main.c ****   {
 703              		.loc 1 615 6 view .LVU250
 704 0032 58B9     		cbnz	r0, .L38
 619:Core/Src/main.c ****   {
 705              		.loc 1 619 3 is_stmt 1 view .LVU251
 619:Core/Src/main.c ****   {
 706              		.loc 1 619 7 is_stmt 0 view .LVU252
 707 0034 0021     		movs	r1, #0
 708 0036 0848     		ldr	r0, .L41
 709 0038 FFF7FEFF 		bl	HAL_UARTEx_SetRxFifoThreshold
 710              	.LVL21:
 619:Core/Src/main.c ****   {
 711              		.loc 1 619 6 view .LVU253
 712 003c 40B9     		cbnz	r0, .L39
 623:Core/Src/main.c ****   {
 713              		.loc 1 623 3 is_stmt 1 view .LVU254
 623:Core/Src/main.c ****   {
 714              		.loc 1 623 7 is_stmt 0 view .LVU255
 715 003e 0648     		ldr	r0, .L41
 716 0040 FFF7FEFF 		bl	HAL_UARTEx_DisableFifoMode
 717              	.LVL22:
 623:Core/Src/main.c ****   {
 718              		.loc 1 623 6 view .LVU256
ARM GAS  /tmp/ccn7bP8l.s 			page 34


 719 0044 30B9     		cbnz	r0, .L40
 631:Core/Src/main.c **** 
 720              		.loc 1 631 1 view .LVU257
 721 0046 08BD     		pop	{r3, pc}
 722              	.L37:
 613:Core/Src/main.c ****   }
 723              		.loc 1 613 5 is_stmt 1 view .LVU258
 724 0048 FFF7FEFF 		bl	Error_Handler
 725              	.LVL23:
 726              	.L38:
 617:Core/Src/main.c ****   }
 727              		.loc 1 617 5 view .LVU259
 728 004c FFF7FEFF 		bl	Error_Handler
 729              	.LVL24:
 730              	.L39:
 621:Core/Src/main.c ****   }
 731              		.loc 1 621 5 view .LVU260
 732 0050 FFF7FEFF 		bl	Error_Handler
 733              	.LVL25:
 734              	.L40:
 625:Core/Src/main.c ****   }
 735              		.loc 1 625 5 view .LVU261
 736 0054 FFF7FEFF 		bl	Error_Handler
 737              	.LVL26:
 738              	.L42:
 739              		.align	2
 740              	.L41:
 741 0058 00000000 		.word	.LANCHOR3
 742 005c 00380140 		.word	1073821696
 743              		.cfi_endproc
 744              	.LFE338:
 746              		.section	.text.MX_TIM2_Init,"ax",%progbits
 747              		.align	1
 748              		.syntax unified
 749              		.thumb
 750              		.thumb_func
 752              	MX_TIM2_Init:
 753              	.LFB335:
 474:Core/Src/main.c **** 
 754              		.loc 1 474 1 view -0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 40
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758 0000 00B5     		push	{lr}
 759              	.LCFI13:
 760              		.cfi_def_cfa_offset 4
 761              		.cfi_offset 14, -4
 762 0002 8BB0     		sub	sp, sp, #44
 763              	.LCFI14:
 764              		.cfi_def_cfa_offset 48
 480:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 765              		.loc 1 480 3 view .LVU263
 480:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 766              		.loc 1 480 27 is_stmt 0 view .LVU264
 767 0004 0023     		movs	r3, #0
 768 0006 0793     		str	r3, [sp, #28]
 769 0008 0893     		str	r3, [sp, #32]
ARM GAS  /tmp/ccn7bP8l.s 			page 35


 770 000a 0993     		str	r3, [sp, #36]
 481:Core/Src/main.c **** 
 771              		.loc 1 481 3 is_stmt 1 view .LVU265
 481:Core/Src/main.c **** 
 772              		.loc 1 481 22 is_stmt 0 view .LVU266
 773 000c 0093     		str	r3, [sp]
 774 000e 0193     		str	r3, [sp, #4]
 775 0010 0293     		str	r3, [sp, #8]
 776 0012 0393     		str	r3, [sp, #12]
 777 0014 0493     		str	r3, [sp, #16]
 778 0016 0593     		str	r3, [sp, #20]
 779 0018 0693     		str	r3, [sp, #24]
 486:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 780              		.loc 1 486 3 is_stmt 1 view .LVU267
 486:Core/Src/main.c ****   htim2.Init.Prescaler = 0;
 781              		.loc 1 486 18 is_stmt 0 view .LVU268
 782 001a 1A48     		ldr	r0, .L53
 783 001c 4FF08042 		mov	r2, #1073741824
 784 0020 0260     		str	r2, [r0]
 487:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 785              		.loc 1 487 3 is_stmt 1 view .LVU269
 487:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 786              		.loc 1 487 24 is_stmt 0 view .LVU270
 787 0022 4360     		str	r3, [r0, #4]
 488:Core/Src/main.c ****   htim2.Init.Period = 4.294967295E9;
 788              		.loc 1 488 3 is_stmt 1 view .LVU271
 488:Core/Src/main.c ****   htim2.Init.Period = 4.294967295E9;
 789              		.loc 1 488 26 is_stmt 0 view .LVU272
 790 0024 8360     		str	r3, [r0, #8]
 489:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 791              		.loc 1 489 3 is_stmt 1 view .LVU273
 489:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 792              		.loc 1 489 21 is_stmt 0 view .LVU274
 793 0026 4FF0FF32 		mov	r2, #-1
 794 002a C260     		str	r2, [r0, #12]
 490:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 795              		.loc 1 490 3 is_stmt 1 view .LVU275
 490:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 796              		.loc 1 490 28 is_stmt 0 view .LVU276
 797 002c 0361     		str	r3, [r0, #16]
 491:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 798              		.loc 1 491 3 is_stmt 1 view .LVU277
 491:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 799              		.loc 1 491 32 is_stmt 0 view .LVU278
 800 002e 8361     		str	r3, [r0, #24]
 492:Core/Src/main.c ****   {
 801              		.loc 1 492 3 is_stmt 1 view .LVU279
 492:Core/Src/main.c ****   {
 802              		.loc 1 492 7 is_stmt 0 view .LVU280
 803 0030 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 804              	.LVL27:
 492:Core/Src/main.c ****   {
 805              		.loc 1 492 6 view .LVU281
 806 0034 F0B9     		cbnz	r0, .L49
 496:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 807              		.loc 1 496 3 is_stmt 1 view .LVU282
 496:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccn7bP8l.s 			page 36


 808              		.loc 1 496 37 is_stmt 0 view .LVU283
 809 0036 0023     		movs	r3, #0
 810 0038 0793     		str	r3, [sp, #28]
 497:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 811              		.loc 1 497 3 is_stmt 1 view .LVU284
 497:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 812              		.loc 1 497 33 is_stmt 0 view .LVU285
 813 003a 0993     		str	r3, [sp, #36]
 498:Core/Src/main.c ****   {
 814              		.loc 1 498 3 is_stmt 1 view .LVU286
 498:Core/Src/main.c ****   {
 815              		.loc 1 498 7 is_stmt 0 view .LVU287
 816 003c 07A9     		add	r1, sp, #28
 817 003e 1148     		ldr	r0, .L53
 818 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 819              	.LVL28:
 498:Core/Src/main.c ****   {
 820              		.loc 1 498 6 view .LVU288
 821 0044 C0B9     		cbnz	r0, .L50
 502:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 822              		.loc 1 502 3 is_stmt 1 view .LVU289
 502:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 823              		.loc 1 502 20 is_stmt 0 view .LVU290
 824 0046 6023     		movs	r3, #96
 825 0048 0093     		str	r3, [sp]
 503:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 826              		.loc 1 503 3 is_stmt 1 view .LVU291
 503:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 827              		.loc 1 503 19 is_stmt 0 view .LVU292
 828 004a 0022     		movs	r2, #0
 829 004c 0192     		str	r2, [sp, #4]
 504:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 830              		.loc 1 504 3 is_stmt 1 view .LVU293
 504:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 831              		.loc 1 504 24 is_stmt 0 view .LVU294
 832 004e 0292     		str	r2, [sp, #8]
 505:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 833              		.loc 1 505 3 is_stmt 1 view .LVU295
 505:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 834              		.loc 1 505 24 is_stmt 0 view .LVU296
 835 0050 0492     		str	r2, [sp, #16]
 506:Core/Src/main.c ****   {
 836              		.loc 1 506 3 is_stmt 1 view .LVU297
 506:Core/Src/main.c ****   {
 837              		.loc 1 506 7 is_stmt 0 view .LVU298
 838 0052 6946     		mov	r1, sp
 839 0054 0B48     		ldr	r0, .L53
 840 0056 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 841              	.LVL29:
 506:Core/Src/main.c ****   {
 842              		.loc 1 506 6 view .LVU299
 843 005a 78B9     		cbnz	r0, .L51
 510:Core/Src/main.c ****   {
 844              		.loc 1 510 3 is_stmt 1 view .LVU300
 510:Core/Src/main.c ****   {
 845              		.loc 1 510 7 is_stmt 0 view .LVU301
 846 005c 0C22     		movs	r2, #12
ARM GAS  /tmp/ccn7bP8l.s 			page 37


 847 005e 6946     		mov	r1, sp
 848 0060 0848     		ldr	r0, .L53
 849 0062 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 850              	.LVL30:
 510:Core/Src/main.c ****   {
 851              		.loc 1 510 6 view .LVU302
 852 0066 58B9     		cbnz	r0, .L52
 517:Core/Src/main.c **** 
 853              		.loc 1 517 3 is_stmt 1 view .LVU303
 854 0068 0648     		ldr	r0, .L53
 855 006a FFF7FEFF 		bl	HAL_TIM_MspPostInit
 856              	.LVL31:
 519:Core/Src/main.c **** 
 857              		.loc 1 519 1 is_stmt 0 view .LVU304
 858 006e 0BB0     		add	sp, sp, #44
 859              	.LCFI15:
 860              		.cfi_remember_state
 861              		.cfi_def_cfa_offset 4
 862              		@ sp needed
 863 0070 5DF804FB 		ldr	pc, [sp], #4
 864              	.L49:
 865              	.LCFI16:
 866              		.cfi_restore_state
 494:Core/Src/main.c ****   }
 867              		.loc 1 494 5 is_stmt 1 view .LVU305
 868 0074 FFF7FEFF 		bl	Error_Handler
 869              	.LVL32:
 870              	.L50:
 500:Core/Src/main.c ****   }
 871              		.loc 1 500 5 view .LVU306
 872 0078 FFF7FEFF 		bl	Error_Handler
 873              	.LVL33:
 874              	.L51:
 508:Core/Src/main.c ****   }
 875              		.loc 1 508 5 view .LVU307
 876 007c FFF7FEFF 		bl	Error_Handler
 877              	.LVL34:
 878              	.L52:
 512:Core/Src/main.c ****   }
 879              		.loc 1 512 5 view .LVU308
 880 0080 FFF7FEFF 		bl	Error_Handler
 881              	.LVL35:
 882              	.L54:
 883              		.align	2
 884              	.L53:
 885 0084 00000000 		.word	.LANCHOR4
 886              		.cfi_endproc
 887              	.LFE335:
 889              		.section	.text.MX_TIM16_Init,"ax",%progbits
 890              		.align	1
 891              		.syntax unified
 892              		.thumb
 893              		.thumb_func
 895              	MX_TIM16_Init:
 896              	.LFB336:
 527:Core/Src/main.c **** 
 897              		.loc 1 527 1 view -0
ARM GAS  /tmp/ccn7bP8l.s 			page 38


 898              		.cfi_startproc
 899              		@ args = 0, pretend = 0, frame = 0
 900              		@ frame_needed = 0, uses_anonymous_args = 0
 901 0000 08B5     		push	{r3, lr}
 902              	.LCFI17:
 903              		.cfi_def_cfa_offset 8
 904              		.cfi_offset 3, -8
 905              		.cfi_offset 14, -4
 536:Core/Src/main.c ****   htim16.Init.Prescaler = 0;
 906              		.loc 1 536 3 view .LVU310
 536:Core/Src/main.c ****   htim16.Init.Prescaler = 0;
 907              		.loc 1 536 19 is_stmt 0 view .LVU311
 908 0002 0948     		ldr	r0, .L59
 909 0004 094B     		ldr	r3, .L59+4
 910 0006 0360     		str	r3, [r0]
 537:Core/Src/main.c ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 911              		.loc 1 537 3 is_stmt 1 view .LVU312
 537:Core/Src/main.c ****   htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 912              		.loc 1 537 25 is_stmt 0 view .LVU313
 913 0008 0023     		movs	r3, #0
 914 000a 4360     		str	r3, [r0, #4]
 538:Core/Src/main.c ****   htim16.Init.Period = 65535;
 915              		.loc 1 538 3 is_stmt 1 view .LVU314
 538:Core/Src/main.c ****   htim16.Init.Period = 65535;
 916              		.loc 1 538 27 is_stmt 0 view .LVU315
 917 000c 8360     		str	r3, [r0, #8]
 539:Core/Src/main.c ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 918              		.loc 1 539 3 is_stmt 1 view .LVU316
 539:Core/Src/main.c ****   htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 919              		.loc 1 539 22 is_stmt 0 view .LVU317
 920 000e 4FF6FF72 		movw	r2, #65535
 921 0012 C260     		str	r2, [r0, #12]
 540:Core/Src/main.c ****   htim16.Init.RepetitionCounter = 0;
 922              		.loc 1 540 3 is_stmt 1 view .LVU318
 540:Core/Src/main.c ****   htim16.Init.RepetitionCounter = 0;
 923              		.loc 1 540 29 is_stmt 0 view .LVU319
 924 0014 0361     		str	r3, [r0, #16]
 541:Core/Src/main.c ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 925              		.loc 1 541 3 is_stmt 1 view .LVU320
 541:Core/Src/main.c ****   htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 926              		.loc 1 541 33 is_stmt 0 view .LVU321
 927 0016 4361     		str	r3, [r0, #20]
 542:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 928              		.loc 1 542 3 is_stmt 1 view .LVU322
 542:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 929              		.loc 1 542 33 is_stmt 0 view .LVU323
 930 0018 8361     		str	r3, [r0, #24]
 543:Core/Src/main.c ****   {
 931              		.loc 1 543 3 is_stmt 1 view .LVU324
 543:Core/Src/main.c ****   {
 932              		.loc 1 543 7 is_stmt 0 view .LVU325
 933 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 934              	.LVL36:
 543:Core/Src/main.c ****   {
 935              		.loc 1 543 6 view .LVU326
 936 001e 00B9     		cbnz	r0, .L58
 551:Core/Src/main.c **** 
ARM GAS  /tmp/ccn7bP8l.s 			page 39


 937              		.loc 1 551 1 view .LVU327
 938 0020 08BD     		pop	{r3, pc}
 939              	.L58:
 545:Core/Src/main.c ****   }
 940              		.loc 1 545 5 is_stmt 1 view .LVU328
 941 0022 FFF7FEFF 		bl	Error_Handler
 942              	.LVL37:
 943              	.L60:
 944 0026 00BF     		.align	2
 945              	.L59:
 946 0028 00000000 		.word	.LANCHOR5
 947 002c 00440140 		.word	1073824768
 948              		.cfi_endproc
 949              	.LFE336:
 951              		.section	.text.MX_TIM17_Init,"ax",%progbits
 952              		.align	1
 953              		.syntax unified
 954              		.thumb
 955              		.thumb_func
 957              	MX_TIM17_Init:
 958              	.LFB337:
 559:Core/Src/main.c **** 
 959              		.loc 1 559 1 view -0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 963 0000 08B5     		push	{r3, lr}
 964              	.LCFI18:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 3, -8
 967              		.cfi_offset 14, -4
 568:Core/Src/main.c ****   htim17.Init.Prescaler = 0;
 968              		.loc 1 568 3 view .LVU330
 568:Core/Src/main.c ****   htim17.Init.Prescaler = 0;
 969              		.loc 1 568 19 is_stmt 0 view .LVU331
 970 0002 0948     		ldr	r0, .L65
 971 0004 094B     		ldr	r3, .L65+4
 972 0006 0360     		str	r3, [r0]
 569:Core/Src/main.c ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 973              		.loc 1 569 3 is_stmt 1 view .LVU332
 569:Core/Src/main.c ****   htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 974              		.loc 1 569 25 is_stmt 0 view .LVU333
 975 0008 0023     		movs	r3, #0
 976 000a 4360     		str	r3, [r0, #4]
 570:Core/Src/main.c ****   htim17.Init.Period = 65535;
 977              		.loc 1 570 3 is_stmt 1 view .LVU334
 570:Core/Src/main.c ****   htim17.Init.Period = 65535;
 978              		.loc 1 570 27 is_stmt 0 view .LVU335
 979 000c 8360     		str	r3, [r0, #8]
 571:Core/Src/main.c ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 980              		.loc 1 571 3 is_stmt 1 view .LVU336
 571:Core/Src/main.c ****   htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 981              		.loc 1 571 22 is_stmt 0 view .LVU337
 982 000e 4FF6FF72 		movw	r2, #65535
 983 0012 C260     		str	r2, [r0, #12]
 572:Core/Src/main.c ****   htim17.Init.RepetitionCounter = 0;
 984              		.loc 1 572 3 is_stmt 1 view .LVU338
ARM GAS  /tmp/ccn7bP8l.s 			page 40


 572:Core/Src/main.c ****   htim17.Init.RepetitionCounter = 0;
 985              		.loc 1 572 29 is_stmt 0 view .LVU339
 986 0014 0361     		str	r3, [r0, #16]
 573:Core/Src/main.c ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 987              		.loc 1 573 3 is_stmt 1 view .LVU340
 573:Core/Src/main.c ****   htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 988              		.loc 1 573 33 is_stmt 0 view .LVU341
 989 0016 4361     		str	r3, [r0, #20]
 574:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 990              		.loc 1 574 3 is_stmt 1 view .LVU342
 574:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 991              		.loc 1 574 33 is_stmt 0 view .LVU343
 992 0018 8361     		str	r3, [r0, #24]
 575:Core/Src/main.c ****   {
 993              		.loc 1 575 3 is_stmt 1 view .LVU344
 575:Core/Src/main.c ****   {
 994              		.loc 1 575 7 is_stmt 0 view .LVU345
 995 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 996              	.LVL38:
 575:Core/Src/main.c ****   {
 997              		.loc 1 575 6 view .LVU346
 998 001e 00B9     		cbnz	r0, .L64
 583:Core/Src/main.c **** 
 999              		.loc 1 583 1 view .LVU347
 1000 0020 08BD     		pop	{r3, pc}
 1001              	.L64:
 577:Core/Src/main.c ****   }
 1002              		.loc 1 577 5 is_stmt 1 view .LVU348
 1003 0022 FFF7FEFF 		bl	Error_Handler
 1004              	.LVL39:
 1005              	.L66:
 1006 0026 00BF     		.align	2
 1007              	.L65:
 1008 0028 00000000 		.word	.LANCHOR6
 1009 002c 00480140 		.word	1073825792
 1010              		.cfi_endproc
 1011              	.LFE337:
 1013              		.section	.text.MX_TIM1_Init,"ax",%progbits
 1014              		.align	1
 1015              		.syntax unified
 1016              		.thumb
 1017              		.thumb_func
 1019              	MX_TIM1_Init:
 1020              	.LFB334:
 388:Core/Src/main.c **** 
 1021              		.loc 1 388 1 view -0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 112
 1024              		@ frame_needed = 0, uses_anonymous_args = 0
 1025 0000 10B5     		push	{r4, lr}
 1026              	.LCFI19:
 1027              		.cfi_def_cfa_offset 8
 1028              		.cfi_offset 4, -8
 1029              		.cfi_offset 14, -4
 1030 0002 9CB0     		sub	sp, sp, #112
 1031              	.LCFI20:
 1032              		.cfi_def_cfa_offset 120
ARM GAS  /tmp/ccn7bP8l.s 			page 41


 394:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1033              		.loc 1 394 3 view .LVU350
 394:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1034              		.loc 1 394 26 is_stmt 0 view .LVU351
 1035 0004 0024     		movs	r4, #0
 1036 0006 1894     		str	r4, [sp, #96]
 1037 0008 1994     		str	r4, [sp, #100]
 1038 000a 1A94     		str	r4, [sp, #104]
 1039 000c 1B94     		str	r4, [sp, #108]
 395:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1040              		.loc 1 395 3 is_stmt 1 view .LVU352
 395:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 1041              		.loc 1 395 27 is_stmt 0 view .LVU353
 1042 000e 1594     		str	r4, [sp, #84]
 1043 0010 1694     		str	r4, [sp, #88]
 1044 0012 1794     		str	r4, [sp, #92]
 396:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1045              		.loc 1 396 3 is_stmt 1 view .LVU354
 396:Core/Src/main.c ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 1046              		.loc 1 396 22 is_stmt 0 view .LVU355
 1047 0014 0E94     		str	r4, [sp, #56]
 1048 0016 0F94     		str	r4, [sp, #60]
 1049 0018 1094     		str	r4, [sp, #64]
 1050 001a 1194     		str	r4, [sp, #68]
 1051 001c 1294     		str	r4, [sp, #72]
 1052 001e 1394     		str	r4, [sp, #76]
 1053 0020 1494     		str	r4, [sp, #80]
 397:Core/Src/main.c **** 
 1054              		.loc 1 397 3 is_stmt 1 view .LVU356
 397:Core/Src/main.c **** 
 1055              		.loc 1 397 34 is_stmt 0 view .LVU357
 1056 0022 3422     		movs	r2, #52
 1057 0024 2146     		mov	r1, r4
 1058 0026 01A8     		add	r0, sp, #4
 1059 0028 FFF7FEFF 		bl	memset
 1060              	.LVL40:
 402:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 1061              		.loc 1 402 3 is_stmt 1 view .LVU358
 402:Core/Src/main.c ****   htim1.Init.Prescaler = 1;
 1062              		.loc 1 402 18 is_stmt 0 view .LVU359
 1063 002c 3448     		ldr	r0, .L83
 1064 002e 354B     		ldr	r3, .L83+4
 1065 0030 0360     		str	r3, [r0]
 403:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1066              		.loc 1 403 3 is_stmt 1 view .LVU360
 403:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 1067              		.loc 1 403 24 is_stmt 0 view .LVU361
 1068 0032 0123     		movs	r3, #1
 1069 0034 4360     		str	r3, [r0, #4]
 404:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1070              		.loc 1 404 3 is_stmt 1 view .LVU362
 404:Core/Src/main.c ****   htim1.Init.Period = 65535;
 1071              		.loc 1 404 26 is_stmt 0 view .LVU363
 1072 0036 8460     		str	r4, [r0, #8]
 405:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1073              		.loc 1 405 3 is_stmt 1 view .LVU364
 405:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccn7bP8l.s 			page 42


 1074              		.loc 1 405 21 is_stmt 0 view .LVU365
 1075 0038 4FF6FF73 		movw	r3, #65535
 1076 003c C360     		str	r3, [r0, #12]
 406:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1077              		.loc 1 406 3 is_stmt 1 view .LVU366
 406:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 1078              		.loc 1 406 28 is_stmt 0 view .LVU367
 1079 003e 0461     		str	r4, [r0, #16]
 407:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1080              		.loc 1 407 3 is_stmt 1 view .LVU368
 407:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1081              		.loc 1 407 32 is_stmt 0 view .LVU369
 1082 0040 4461     		str	r4, [r0, #20]
 408:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1083              		.loc 1 408 3 is_stmt 1 view .LVU370
 408:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 1084              		.loc 1 408 32 is_stmt 0 view .LVU371
 1085 0042 8461     		str	r4, [r0, #24]
 409:Core/Src/main.c ****   {
 1086              		.loc 1 409 3 is_stmt 1 view .LVU372
 409:Core/Src/main.c ****   {
 1087              		.loc 1 409 7 is_stmt 0 view .LVU373
 1088 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1089              	.LVL41:
 409:Core/Src/main.c ****   {
 1090              		.loc 1 409 6 view .LVU374
 1091 0048 0028     		cmp	r0, #0
 1092 004a 4AD1     		bne	.L76
 413:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1093              		.loc 1 413 3 is_stmt 1 view .LVU375
 413:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 1094              		.loc 1 413 34 is_stmt 0 view .LVU376
 1095 004c 4FF48053 		mov	r3, #4096
 1096 0050 1893     		str	r3, [sp, #96]
 414:Core/Src/main.c ****   {
 1097              		.loc 1 414 3 is_stmt 1 view .LVU377
 414:Core/Src/main.c ****   {
 1098              		.loc 1 414 7 is_stmt 0 view .LVU378
 1099 0052 18A9     		add	r1, sp, #96
 1100 0054 2A48     		ldr	r0, .L83
 1101 0056 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1102              	.LVL42:
 414:Core/Src/main.c ****   {
 1103              		.loc 1 414 6 view .LVU379
 1104 005a 0028     		cmp	r0, #0
 1105 005c 43D1     		bne	.L77
 418:Core/Src/main.c ****   {
 1106              		.loc 1 418 3 is_stmt 1 view .LVU380
 418:Core/Src/main.c ****   {
 1107              		.loc 1 418 7 is_stmt 0 view .LVU381
 1108 005e 2848     		ldr	r0, .L83
 1109 0060 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1110              	.LVL43:
 418:Core/Src/main.c ****   {
 1111              		.loc 1 418 6 view .LVU382
 1112 0064 0028     		cmp	r0, #0
 1113 0066 40D1     		bne	.L78
ARM GAS  /tmp/ccn7bP8l.s 			page 43


 422:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1114              		.loc 1 422 3 is_stmt 1 view .LVU383
 422:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 1115              		.loc 1 422 37 is_stmt 0 view .LVU384
 1116 0068 0023     		movs	r3, #0
 1117 006a 1593     		str	r3, [sp, #84]
 423:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1118              		.loc 1 423 3 is_stmt 1 view .LVU385
 423:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1119              		.loc 1 423 38 is_stmt 0 view .LVU386
 1120 006c 1693     		str	r3, [sp, #88]
 424:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1121              		.loc 1 424 3 is_stmt 1 view .LVU387
 424:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 1122              		.loc 1 424 33 is_stmt 0 view .LVU388
 1123 006e 1793     		str	r3, [sp, #92]
 425:Core/Src/main.c ****   {
 1124              		.loc 1 425 3 is_stmt 1 view .LVU389
 425:Core/Src/main.c ****   {
 1125              		.loc 1 425 7 is_stmt 0 view .LVU390
 1126 0070 15A9     		add	r1, sp, #84
 1127 0072 2348     		ldr	r0, .L83
 1128 0074 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1129              	.LVL44:
 425:Core/Src/main.c ****   {
 1130              		.loc 1 425 6 view .LVU391
 1131 0078 0028     		cmp	r0, #0
 1132 007a 38D1     		bne	.L79
 429:Core/Src/main.c ****   sConfigOC.Pulse = 30000;
 1133              		.loc 1 429 3 is_stmt 1 view .LVU392
 429:Core/Src/main.c ****   sConfigOC.Pulse = 30000;
 1134              		.loc 1 429 20 is_stmt 0 view .LVU393
 1135 007c 6023     		movs	r3, #96
 1136 007e 0E93     		str	r3, [sp, #56]
 430:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1137              		.loc 1 430 3 is_stmt 1 view .LVU394
 430:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1138              		.loc 1 430 19 is_stmt 0 view .LVU395
 1139 0080 47F23053 		movw	r3, #30000
 1140 0084 0F93     		str	r3, [sp, #60]
 431:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1141              		.loc 1 431 3 is_stmt 1 view .LVU396
 431:Core/Src/main.c ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 1142              		.loc 1 431 24 is_stmt 0 view .LVU397
 1143 0086 0022     		movs	r2, #0
 1144 0088 1092     		str	r2, [sp, #64]
 432:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1145              		.loc 1 432 3 is_stmt 1 view .LVU398
 432:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1146              		.loc 1 432 25 is_stmt 0 view .LVU399
 1147 008a 1192     		str	r2, [sp, #68]
 433:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1148              		.loc 1 433 3 is_stmt 1 view .LVU400
 433:Core/Src/main.c ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 1149              		.loc 1 433 24 is_stmt 0 view .LVU401
 1150 008c 1292     		str	r2, [sp, #72]
 434:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
ARM GAS  /tmp/ccn7bP8l.s 			page 44


 1151              		.loc 1 434 3 is_stmt 1 view .LVU402
 434:Core/Src/main.c ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 1152              		.loc 1 434 25 is_stmt 0 view .LVU403
 1153 008e 1392     		str	r2, [sp, #76]
 435:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1154              		.loc 1 435 3 is_stmt 1 view .LVU404
 435:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 1155              		.loc 1 435 26 is_stmt 0 view .LVU405
 1156 0090 1492     		str	r2, [sp, #80]
 436:Core/Src/main.c ****   {
 1157              		.loc 1 436 3 is_stmt 1 view .LVU406
 436:Core/Src/main.c ****   {
 1158              		.loc 1 436 7 is_stmt 0 view .LVU407
 1159 0092 0EA9     		add	r1, sp, #56
 1160 0094 1A48     		ldr	r0, .L83
 1161 0096 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1162              	.LVL45:
 436:Core/Src/main.c ****   {
 1163              		.loc 1 436 6 view .LVU408
 1164 009a 50BB     		cbnz	r0, .L80
 440:Core/Src/main.c ****   {
 1165              		.loc 1 440 3 is_stmt 1 view .LVU409
 440:Core/Src/main.c ****   {
 1166              		.loc 1 440 7 is_stmt 0 view .LVU410
 1167 009c 0422     		movs	r2, #4
 1168 009e 0EA9     		add	r1, sp, #56
 1169 00a0 1748     		ldr	r0, .L83
 1170 00a2 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1171              	.LVL46:
 440:Core/Src/main.c ****   {
 1172              		.loc 1 440 6 view .LVU411
 1173 00a6 30BB     		cbnz	r0, .L81
 444:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1174              		.loc 1 444 3 is_stmt 1 view .LVU412
 444:Core/Src/main.c ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 1175              		.loc 1 444 40 is_stmt 0 view .LVU413
 1176 00a8 0023     		movs	r3, #0
 1177 00aa 0193     		str	r3, [sp, #4]
 445:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1178              		.loc 1 445 3 is_stmt 1 view .LVU414
 445:Core/Src/main.c ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 1179              		.loc 1 445 41 is_stmt 0 view .LVU415
 1180 00ac 0293     		str	r3, [sp, #8]
 446:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 255;
 1181              		.loc 1 446 3 is_stmt 1 view .LVU416
 446:Core/Src/main.c ****   sBreakDeadTimeConfig.DeadTime = 255;
 1182              		.loc 1 446 34 is_stmt 0 view .LVU417
 1183 00ae 0393     		str	r3, [sp, #12]
 447:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1184              		.loc 1 447 3 is_stmt 1 view .LVU418
 447:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 1185              		.loc 1 447 33 is_stmt 0 view .LVU419
 1186 00b0 FF22     		movs	r2, #255
 1187 00b2 0492     		str	r2, [sp, #16]
 448:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 1188              		.loc 1 448 3 is_stmt 1 view .LVU420
 448:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
ARM GAS  /tmp/ccn7bP8l.s 			page 45


 1189              		.loc 1 448 35 is_stmt 0 view .LVU421
 1190 00b4 0593     		str	r3, [sp, #20]
 449:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1191              		.loc 1 449 3 is_stmt 1 view .LVU422
 449:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakFilter = 0;
 1192              		.loc 1 449 38 is_stmt 0 view .LVU423
 1193 00b6 4FF40052 		mov	r2, #8192
 1194 00ba 0692     		str	r2, [sp, #24]
 450:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 1195              		.loc 1 450 3 is_stmt 1 view .LVU424
 450:Core/Src/main.c ****   sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 1196              		.loc 1 450 36 is_stmt 0 view .LVU425
 1197 00bc 0793     		str	r3, [sp, #28]
 451:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1198              		.loc 1 451 3 is_stmt 1 view .LVU426
 451:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 1199              		.loc 1 451 36 is_stmt 0 view .LVU427
 1200 00be 0893     		str	r3, [sp, #32]
 452:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1201              		.loc 1 452 3 is_stmt 1 view .LVU428
 452:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 1202              		.loc 1 452 36 is_stmt 0 view .LVU429
 1203 00c0 0993     		str	r3, [sp, #36]
 453:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1204              		.loc 1 453 3 is_stmt 1 view .LVU430
 453:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2Filter = 0;
 1205              		.loc 1 453 39 is_stmt 0 view .LVU431
 1206 00c2 4FF00072 		mov	r2, #33554432
 1207 00c6 0A92     		str	r2, [sp, #40]
 454:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 1208              		.loc 1 454 3 is_stmt 1 view .LVU432
 454:Core/Src/main.c ****   sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 1209              		.loc 1 454 37 is_stmt 0 view .LVU433
 1210 00c8 0B93     		str	r3, [sp, #44]
 455:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1211              		.loc 1 455 3 is_stmt 1 view .LVU434
 455:Core/Src/main.c ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 1212              		.loc 1 455 37 is_stmt 0 view .LVU435
 1213 00ca 0C93     		str	r3, [sp, #48]
 456:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1214              		.loc 1 456 3 is_stmt 1 view .LVU436
 456:Core/Src/main.c ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 1215              		.loc 1 456 40 is_stmt 0 view .LVU437
 1216 00cc 0D93     		str	r3, [sp, #52]
 457:Core/Src/main.c ****   {
 1217              		.loc 1 457 3 is_stmt 1 view .LVU438
 457:Core/Src/main.c ****   {
 1218              		.loc 1 457 7 is_stmt 0 view .LVU439
 1219 00ce 01A9     		add	r1, sp, #4
 1220 00d0 0B48     		ldr	r0, .L83
 1221 00d2 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1222              	.LVL47:
 457:Core/Src/main.c ****   {
 1223              		.loc 1 457 6 view .LVU440
 1224 00d6 80B9     		cbnz	r0, .L82
 464:Core/Src/main.c **** 
 1225              		.loc 1 464 3 is_stmt 1 view .LVU441
ARM GAS  /tmp/ccn7bP8l.s 			page 46


 1226 00d8 0948     		ldr	r0, .L83
 1227 00da FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1228              	.LVL48:
 466:Core/Src/main.c **** 
 1229              		.loc 1 466 1 is_stmt 0 view .LVU442
 1230 00de 1CB0     		add	sp, sp, #112
 1231              	.LCFI21:
 1232              		.cfi_remember_state
 1233              		.cfi_def_cfa_offset 8
 1234              		@ sp needed
 1235 00e0 10BD     		pop	{r4, pc}
 1236              	.L76:
 1237              	.LCFI22:
 1238              		.cfi_restore_state
 411:Core/Src/main.c ****   }
 1239              		.loc 1 411 5 is_stmt 1 view .LVU443
 1240 00e2 FFF7FEFF 		bl	Error_Handler
 1241              	.LVL49:
 1242              	.L77:
 416:Core/Src/main.c ****   }
 1243              		.loc 1 416 5 view .LVU444
 1244 00e6 FFF7FEFF 		bl	Error_Handler
 1245              	.LVL50:
 1246              	.L78:
 420:Core/Src/main.c ****   }
 1247              		.loc 1 420 5 view .LVU445
 1248 00ea FFF7FEFF 		bl	Error_Handler
 1249              	.LVL51:
 1250              	.L79:
 427:Core/Src/main.c ****   }
 1251              		.loc 1 427 5 view .LVU446
 1252 00ee FFF7FEFF 		bl	Error_Handler
 1253              	.LVL52:
 1254              	.L80:
 438:Core/Src/main.c ****   }
 1255              		.loc 1 438 5 view .LVU447
 1256 00f2 FFF7FEFF 		bl	Error_Handler
 1257              	.LVL53:
 1258              	.L81:
 442:Core/Src/main.c ****   }
 1259              		.loc 1 442 5 view .LVU448
 1260 00f6 FFF7FEFF 		bl	Error_Handler
 1261              	.LVL54:
 1262              	.L82:
 459:Core/Src/main.c ****   }
 1263              		.loc 1 459 5 view .LVU449
 1264 00fa FFF7FEFF 		bl	Error_Handler
 1265              	.LVL55:
 1266              	.L84:
 1267 00fe 00BF     		.align	2
 1268              	.L83:
 1269 0100 00000000 		.word	.LANCHOR7
 1270 0104 002C0140 		.word	1073818624
 1271              		.cfi_endproc
 1272              	.LFE334:
 1274              		.section	.text.FDCAN_Config,"ax",%progbits
 1275              		.align	1
ARM GAS  /tmp/ccn7bP8l.s 			page 47


 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1280              	FDCAN_Config:
 1281              	.LFB340:
 677:Core/Src/main.c **** 	FDCAN_FilterTypeDef sFilterConfig;
 1282              		.loc 1 677 1 view -0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 24
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
 1286 0000 00B5     		push	{lr}
 1287              	.LCFI23:
 1288              		.cfi_def_cfa_offset 4
 1289              		.cfi_offset 14, -4
 1290 0002 89B0     		sub	sp, sp, #36
 1291              	.LCFI24:
 1292              		.cfi_def_cfa_offset 40
 678:Core/Src/main.c **** 
 1293              		.loc 1 678 2 view .LVU451
 681:Core/Src/main.c **** 	sFilterConfig.FilterIndex = 0;
 1294              		.loc 1 681 2 view .LVU452
 681:Core/Src/main.c **** 	sFilterConfig.FilterIndex = 0;
 1295              		.loc 1 681 23 is_stmt 0 view .LVU453
 1296 0004 0023     		movs	r3, #0
 1297 0006 0293     		str	r3, [sp, #8]
 682:Core/Src/main.c **** 	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 1298              		.loc 1 682 2 is_stmt 1 view .LVU454
 682:Core/Src/main.c **** 	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 1299              		.loc 1 682 28 is_stmt 0 view .LVU455
 1300 0008 0393     		str	r3, [sp, #12]
 683:Core/Src/main.c **** 	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 1301              		.loc 1 683 2 is_stmt 1 view .LVU456
 683:Core/Src/main.c **** 	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 1302              		.loc 1 683 27 is_stmt 0 view .LVU457
 1303 000a 0222     		movs	r2, #2
 1304 000c 0492     		str	r2, [sp, #16]
 684:Core/Src/main.c **** 	sFilterConfig.FilterID1 = 0x00;
 1305              		.loc 1 684 2 is_stmt 1 view .LVU458
 684:Core/Src/main.c **** 	sFilterConfig.FilterID1 = 0x00;
 1306              		.loc 1 684 29 is_stmt 0 view .LVU459
 1307 000e 0122     		movs	r2, #1
 1308 0010 0592     		str	r2, [sp, #20]
 685:Core/Src/main.c **** 	sFilterConfig.FilterID2 = 0x00;
 1309              		.loc 1 685 2 is_stmt 1 view .LVU460
 685:Core/Src/main.c **** 	sFilterConfig.FilterID2 = 0x00;
 1310              		.loc 1 685 26 is_stmt 0 view .LVU461
 1311 0012 0693     		str	r3, [sp, #24]
 686:Core/Src/main.c **** 	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 1312              		.loc 1 686 2 is_stmt 1 view .LVU462
 686:Core/Src/main.c **** 	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 1313              		.loc 1 686 26 is_stmt 0 view .LVU463
 1314 0014 0793     		str	r3, [sp, #28]
 687:Core/Src/main.c **** 	{
 1315              		.loc 1 687 2 is_stmt 1 view .LVU464
 687:Core/Src/main.c **** 	{
 1316              		.loc 1 687 6 is_stmt 0 view .LVU465
 1317 0016 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccn7bP8l.s 			page 48


 1318 0018 1B48     		ldr	r0, .L97
 1319 001a FFF7FEFF 		bl	HAL_FDCAN_ConfigFilter
 1320              	.LVL56:
 687:Core/Src/main.c **** 	{
 1321              		.loc 1 687 5 view .LVU466
 1322 001e 48BB     		cbnz	r0, .L92
 695:Core/Src/main.c **** 	{
 1323              		.loc 1 695 2 is_stmt 1 view .LVU467
 695:Core/Src/main.c **** 	{
 1324              		.loc 1 695 6 is_stmt 0 view .LVU468
 1325 0020 0023     		movs	r3, #0
 1326 0022 0093     		str	r3, [sp]
 1327 0024 0222     		movs	r2, #2
 1328 0026 1146     		mov	r1, r2
 1329 0028 1748     		ldr	r0, .L97
 1330 002a FFF7FEFF 		bl	HAL_FDCAN_ConfigGlobalFilter
 1331              	.LVL57:
 695:Core/Src/main.c **** 	{
 1332              		.loc 1 695 5 view .LVU469
 1333 002e 18BB     		cbnz	r0, .L93
 701:Core/Src/main.c **** 	{
 1334              		.loc 1 701 2 is_stmt 1 view .LVU470
 701:Core/Src/main.c **** 	{
 1335              		.loc 1 701 6 is_stmt 0 view .LVU471
 1336 0030 1548     		ldr	r0, .L97
 1337 0032 FFF7FEFF 		bl	HAL_FDCAN_Start
 1338              	.LVL58:
 701:Core/Src/main.c **** 	{
 1339              		.loc 1 701 5 view .LVU472
 1340 0036 08BB     		cbnz	r0, .L94
 706:Core/Src/main.c **** 	{
 1341              		.loc 1 706 2 is_stmt 1 view .LVU473
 706:Core/Src/main.c **** 	{
 1342              		.loc 1 706 6 is_stmt 0 view .LVU474
 1343 0038 0022     		movs	r2, #0
 1344 003a 0121     		movs	r1, #1
 1345 003c 1248     		ldr	r0, .L97
 1346 003e FFF7FEFF 		bl	HAL_FDCAN_ActivateNotification
 1347              	.LVL59:
 706:Core/Src/main.c **** 	{
 1348              		.loc 1 706 5 view .LVU475
 1349 0042 E8B9     		cbnz	r0, .L95
 710:Core/Src/main.c **** 	{
 1350              		.loc 1 710 3 is_stmt 1 view .LVU476
 710:Core/Src/main.c **** 	{
 1351              		.loc 1 710 7 is_stmt 0 view .LVU477
 1352 0044 0022     		movs	r2, #0
 1353 0046 0821     		movs	r1, #8
 1354 0048 0F48     		ldr	r0, .L97
 1355 004a FFF7FEFF 		bl	HAL_FDCAN_ActivateNotification
 1356              	.LVL60:
 710:Core/Src/main.c **** 	{
 1357              		.loc 1 710 6 view .LVU478
 1358 004e C8B9     		cbnz	r0, .L96
 716:Core/Src/main.c **** 	TxHeader.IdType = FDCAN_STANDARD_ID;
 1359              		.loc 1 716 2 is_stmt 1 view .LVU479
 716:Core/Src/main.c **** 	TxHeader.IdType = FDCAN_STANDARD_ID;
ARM GAS  /tmp/ccn7bP8l.s 			page 49


 1360              		.loc 1 716 22 is_stmt 0 view .LVU480
 1361 0050 0E4B     		ldr	r3, .L97+4
 1362 0052 40F22132 		movw	r2, #801
 1363 0056 1A60     		str	r2, [r3]
 717:Core/Src/main.c **** 	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 1364              		.loc 1 717 2 is_stmt 1 view .LVU481
 717:Core/Src/main.c **** 	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 1365              		.loc 1 717 18 is_stmt 0 view .LVU482
 1366 0058 0022     		movs	r2, #0
 1367 005a 5A60     		str	r2, [r3, #4]
 718:Core/Src/main.c **** 	TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 1368              		.loc 1 718 2 is_stmt 1 view .LVU483
 718:Core/Src/main.c **** 	TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 1369              		.loc 1 718 23 is_stmt 0 view .LVU484
 1370 005c 9A60     		str	r2, [r3, #8]
 719:Core/Src/main.c **** 	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 1371              		.loc 1 719 2 is_stmt 1 view .LVU485
 719:Core/Src/main.c **** 	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 1372              		.loc 1 719 22 is_stmt 0 view .LVU486
 1373 005e 4FF40031 		mov	r1, #131072
 1374 0062 D960     		str	r1, [r3, #12]
 720:Core/Src/main.c **** 	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 1375              		.loc 1 720 2 is_stmt 1 view .LVU487
 720:Core/Src/main.c **** 	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 1376              		.loc 1 720 31 is_stmt 0 view .LVU488
 1377 0064 1A61     		str	r2, [r3, #16]
 721:Core/Src/main.c **** 	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 1378              		.loc 1 721 2 is_stmt 1 view .LVU489
 721:Core/Src/main.c **** 	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 1379              		.loc 1 721 25 is_stmt 0 view .LVU490
 1380 0066 5A61     		str	r2, [r3, #20]
 722:Core/Src/main.c **** 	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 1381              		.loc 1 722 2 is_stmt 1 view .LVU491
 722:Core/Src/main.c **** 	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 1382              		.loc 1 722 20 is_stmt 0 view .LVU492
 1383 0068 9A61     		str	r2, [r3, #24]
 723:Core/Src/main.c **** 	TxHeader.MessageMarker = 0;
 1384              		.loc 1 723 2 is_stmt 1 view .LVU493
 723:Core/Src/main.c **** 	TxHeader.MessageMarker = 0;
 1385              		.loc 1 723 30 is_stmt 0 view .LVU494
 1386 006a DA61     		str	r2, [r3, #28]
 724:Core/Src/main.c **** }
 1387              		.loc 1 724 2 is_stmt 1 view .LVU495
 724:Core/Src/main.c **** }
 1388              		.loc 1 724 25 is_stmt 0 view .LVU496
 1389 006c 1A62     		str	r2, [r3, #32]
 725:Core/Src/main.c **** 
 1390              		.loc 1 725 1 view .LVU497
 1391 006e 09B0     		add	sp, sp, #36
 1392              	.LCFI25:
 1393              		.cfi_remember_state
 1394              		.cfi_def_cfa_offset 4
 1395              		@ sp needed
 1396 0070 5DF804FB 		ldr	pc, [sp], #4
 1397              	.L92:
 1398              	.LCFI26:
 1399              		.cfi_restore_state
ARM GAS  /tmp/ccn7bP8l.s 			page 50


 689:Core/Src/main.c **** 	}
 1400              		.loc 1 689 3 is_stmt 1 view .LVU498
 1401 0074 FFF7FEFF 		bl	Error_Handler
 1402              	.LVL61:
 1403              	.L93:
 697:Core/Src/main.c **** 	}
 1404              		.loc 1 697 3 view .LVU499
 1405 0078 FFF7FEFF 		bl	Error_Handler
 1406              	.LVL62:
 1407              	.L94:
 703:Core/Src/main.c **** 	}
 1408              		.loc 1 703 3 view .LVU500
 1409 007c FFF7FEFF 		bl	Error_Handler
 1410              	.LVL63:
 1411              	.L95:
 708:Core/Src/main.c **** 	}
 1412              		.loc 1 708 3 view .LVU501
 1413 0080 FFF7FEFF 		bl	Error_Handler
 1414              	.LVL64:
 1415              	.L96:
 712:Core/Src/main.c **** 	}
 1416              		.loc 1 712 3 view .LVU502
 1417 0084 FFF7FEFF 		bl	Error_Handler
 1418              	.LVL65:
 1419              	.L98:
 1420              		.align	2
 1421              	.L97:
 1422 0088 00000000 		.word	.LANCHOR2
 1423 008c 00000000 		.word	.LANCHOR8
 1424              		.cfi_endproc
 1425              	.LFE340:
 1427              		.section	.text.SystemClock_Config,"ax",%progbits
 1428              		.align	1
 1429              		.global	SystemClock_Config
 1430              		.syntax unified
 1431              		.thumb
 1432              		.thumb_func
 1434              	SystemClock_Config:
 1435              	.LFB330:
 166:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1436              		.loc 1 166 1 view -0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 144
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 1440 0000 10B5     		push	{r4, lr}
 1441              	.LCFI27:
 1442              		.cfi_def_cfa_offset 8
 1443              		.cfi_offset 4, -8
 1444              		.cfi_offset 14, -4
 1445 0002 A4B0     		sub	sp, sp, #144
 1446              	.LCFI28:
 1447              		.cfi_def_cfa_offset 152
 167:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1448              		.loc 1 167 3 view .LVU504
 167:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1449              		.loc 1 167 22 is_stmt 0 view .LVU505
 1450 0004 3822     		movs	r2, #56
ARM GAS  /tmp/ccn7bP8l.s 			page 51


 1451 0006 0021     		movs	r1, #0
 1452 0008 16A8     		add	r0, sp, #88
 1453 000a FFF7FEFF 		bl	memset
 1454              	.LVL66:
 168:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1455              		.loc 1 168 3 is_stmt 1 view .LVU506
 168:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1456              		.loc 1 168 22 is_stmt 0 view .LVU507
 1457 000e 0024     		movs	r4, #0
 1458 0010 1194     		str	r4, [sp, #68]
 1459 0012 1294     		str	r4, [sp, #72]
 1460 0014 1394     		str	r4, [sp, #76]
 1461 0016 1494     		str	r4, [sp, #80]
 1462 0018 1594     		str	r4, [sp, #84]
 169:Core/Src/main.c **** 
 1463              		.loc 1 169 3 is_stmt 1 view .LVU508
 169:Core/Src/main.c **** 
 1464              		.loc 1 169 28 is_stmt 0 view .LVU509
 1465 001a 4422     		movs	r2, #68
 1466 001c 2146     		mov	r1, r4
 1467 001e 6846     		mov	r0, sp
 1468 0020 FFF7FEFF 		bl	memset
 1469              	.LVL67:
 173:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1470              		.loc 1 173 3 is_stmt 1 view .LVU510
 1471 0024 2046     		mov	r0, r4
 1472 0026 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 1473              	.LVL68:
 177:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1474              		.loc 1 177 3 view .LVU511
 177:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1475              		.loc 1 177 36 is_stmt 0 view .LVU512
 1476 002a 0223     		movs	r3, #2
 1477 002c 1693     		str	r3, [sp, #88]
 178:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1478              		.loc 1 178 3 is_stmt 1 view .LVU513
 178:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1479              		.loc 1 178 30 is_stmt 0 view .LVU514
 1480 002e 4FF48072 		mov	r2, #256
 1481 0032 1992     		str	r2, [sp, #100]
 179:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1482              		.loc 1 179 3 is_stmt 1 view .LVU515
 179:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1483              		.loc 1 179 41 is_stmt 0 view .LVU516
 1484 0034 4022     		movs	r2, #64
 1485 0036 1A92     		str	r2, [sp, #104]
 180:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1486              		.loc 1 180 3 is_stmt 1 view .LVU517
 180:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1487              		.loc 1 180 34 is_stmt 0 view .LVU518
 1488 0038 1D93     		str	r3, [sp, #116]
 181:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 1489              		.loc 1 181 3 is_stmt 1 view .LVU519
 181:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 1490              		.loc 1 181 35 is_stmt 0 view .LVU520
 1491 003a 1E93     		str	r3, [sp, #120]
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 20;
ARM GAS  /tmp/ccn7bP8l.s 			page 52


 1492              		.loc 1 182 3 is_stmt 1 view .LVU521
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 20;
 1493              		.loc 1 182 30 is_stmt 0 view .LVU522
 1494 003c 0122     		movs	r2, #1
 1495 003e 1F92     		str	r2, [sp, #124]
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1496              		.loc 1 183 3 is_stmt 1 view .LVU523
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1497              		.loc 1 183 30 is_stmt 0 view .LVU524
 1498 0040 1422     		movs	r2, #20
 1499 0042 2092     		str	r2, [sp, #128]
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 1500              		.loc 1 184 3 is_stmt 1 view .LVU525
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 1501              		.loc 1 184 30 is_stmt 0 view .LVU526
 1502 0044 2193     		str	r3, [sp, #132]
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 1503              		.loc 1 185 3 is_stmt 1 view .LVU527
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 1504              		.loc 1 185 30 is_stmt 0 view .LVU528
 1505 0046 2293     		str	r3, [sp, #136]
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1506              		.loc 1 186 3 is_stmt 1 view .LVU529
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1507              		.loc 1 186 30 is_stmt 0 view .LVU530
 1508 0048 2393     		str	r3, [sp, #140]
 187:Core/Src/main.c ****   {
 1509              		.loc 1 187 3 is_stmt 1 view .LVU531
 187:Core/Src/main.c ****   {
 1510              		.loc 1 187 7 is_stmt 0 view .LVU532
 1511 004a 16A8     		add	r0, sp, #88
 1512 004c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1513              	.LVL69:
 187:Core/Src/main.c ****   {
 1514              		.loc 1 187 6 view .LVU533
 1515 0050 E8B9     		cbnz	r0, .L104
 193:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1516              		.loc 1 193 3 is_stmt 1 view .LVU534
 193:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1517              		.loc 1 193 31 is_stmt 0 view .LVU535
 1518 0052 0F23     		movs	r3, #15
 1519 0054 1193     		str	r3, [sp, #68]
 195:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1520              		.loc 1 195 3 is_stmt 1 view .LVU536
 195:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1521              		.loc 1 195 34 is_stmt 0 view .LVU537
 1522 0056 0323     		movs	r3, #3
 1523 0058 1293     		str	r3, [sp, #72]
 196:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1524              		.loc 1 196 3 is_stmt 1 view .LVU538
 196:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1525              		.loc 1 196 35 is_stmt 0 view .LVU539
 1526 005a 0023     		movs	r3, #0
 1527 005c 1393     		str	r3, [sp, #76]
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1528              		.loc 1 197 3 is_stmt 1 view .LVU540
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  /tmp/ccn7bP8l.s 			page 53


 1529              		.loc 1 197 36 is_stmt 0 view .LVU541
 1530 005e 1493     		str	r3, [sp, #80]
 198:Core/Src/main.c **** 
 1531              		.loc 1 198 3 is_stmt 1 view .LVU542
 198:Core/Src/main.c **** 
 1532              		.loc 1 198 36 is_stmt 0 view .LVU543
 1533 0060 1593     		str	r3, [sp, #84]
 200:Core/Src/main.c ****   {
 1534              		.loc 1 200 3 is_stmt 1 view .LVU544
 200:Core/Src/main.c ****   {
 1535              		.loc 1 200 7 is_stmt 0 view .LVU545
 1536 0062 0421     		movs	r1, #4
 1537 0064 11A8     		add	r0, sp, #68
 1538 0066 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1539              	.LVL70:
 200:Core/Src/main.c ****   {
 1540              		.loc 1 200 6 view .LVU546
 1541 006a 90B9     		cbnz	r0, .L105
 206:Core/Src/main.c ****                               |RCC_PERIPHCLK_FDCAN;
 1542              		.loc 1 206 3 is_stmt 1 view .LVU547
 206:Core/Src/main.c ****                               |RCC_PERIPHCLK_FDCAN;
 1543              		.loc 1 206 38 is_stmt 0 view .LVU548
 1544 006c 49F20103 		movw	r3, #36865
 1545 0070 0093     		str	r3, [sp]
 208:Core/Src/main.c ****   PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 1546              		.loc 1 208 3 is_stmt 1 view .LVU549
 208:Core/Src/main.c ****   PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 1547              		.loc 1 208 38 is_stmt 0 view .LVU550
 1548 0072 0023     		movs	r3, #0
 1549 0074 0193     		str	r3, [sp, #4]
 209:Core/Src/main.c ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 1550              		.loc 1 209 3 is_stmt 1 view .LVU551
 209:Core/Src/main.c ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 1551              		.loc 1 209 37 is_stmt 0 view .LVU552
 1552 0076 4FF00073 		mov	r3, #33554432
 1553 007a 0C93     		str	r3, [sp, #48]
 210:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1554              		.loc 1 210 3 is_stmt 1 view .LVU553
 210:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1555              		.loc 1 210 37 is_stmt 0 view .LVU554
 1556 007c 4FF00053 		mov	r3, #536870912
 1557 0080 0F93     		str	r3, [sp, #60]
 211:Core/Src/main.c ****   {
 1558              		.loc 1 211 3 is_stmt 1 view .LVU555
 211:Core/Src/main.c ****   {
 1559              		.loc 1 211 7 is_stmt 0 view .LVU556
 1560 0082 6846     		mov	r0, sp
 1561 0084 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1562              	.LVL71:
 211:Core/Src/main.c ****   {
 1563              		.loc 1 211 6 view .LVU557
 1564 0088 28B9     		cbnz	r0, .L106
 215:Core/Src/main.c **** 
 1565              		.loc 1 215 1 view .LVU558
 1566 008a 24B0     		add	sp, sp, #144
 1567              	.LCFI29:
 1568              		.cfi_remember_state
ARM GAS  /tmp/ccn7bP8l.s 			page 54


 1569              		.cfi_def_cfa_offset 8
 1570              		@ sp needed
 1571 008c 10BD     		pop	{r4, pc}
 1572              	.L104:
 1573              	.LCFI30:
 1574              		.cfi_restore_state
 189:Core/Src/main.c ****   }
 1575              		.loc 1 189 5 is_stmt 1 view .LVU559
 1576 008e FFF7FEFF 		bl	Error_Handler
 1577              	.LVL72:
 1578              	.L105:
 202:Core/Src/main.c ****   }
 1579              		.loc 1 202 5 view .LVU560
 1580 0092 FFF7FEFF 		bl	Error_Handler
 1581              	.LVL73:
 1582              	.L106:
 213:Core/Src/main.c ****   }
 1583              		.loc 1 213 5 view .LVU561
 1584 0096 FFF7FEFF 		bl	Error_Handler
 1585              	.LVL74:
 1586              		.cfi_endproc
 1587              	.LFE330:
 1589              		.section	.text.main,"ax",%progbits
 1590              		.align	1
 1591              		.global	main
 1592              		.syntax unified
 1593              		.thumb
 1594              		.thumb_func
 1596              	main:
 1597              	.LFB329:
  89:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1598              		.loc 1 89 1 view -0
 1599              		.cfi_startproc
 1600              		@ Volatile: function does not return.
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603 0000 08B5     		push	{r3, lr}
 1604              	.LCFI31:
 1605              		.cfi_def_cfa_offset 8
 1606              		.cfi_offset 3, -8
 1607              		.cfi_offset 14, -4
  97:Core/Src/main.c **** 
 1608              		.loc 1 97 3 view .LVU563
 1609 0002 FFF7FEFF 		bl	HAL_Init
 1610              	.LVL75:
 104:Core/Src/main.c **** 
 1611              		.loc 1 104 3 view .LVU564
 1612 0006 FFF7FEFF 		bl	SystemClock_Config
 1613              	.LVL76:
 111:Core/Src/main.c ****   MX_ADC1_Init();
 1614              		.loc 1 111 3 view .LVU565
 1615 000a FFF7FEFF 		bl	MX_GPIO_Init
 1616              	.LVL77:
 112:Core/Src/main.c ****   MX_ADC2_Init();
 1617              		.loc 1 112 3 view .LVU566
 1618 000e FFF7FEFF 		bl	MX_ADC1_Init
 1619              	.LVL78:
ARM GAS  /tmp/ccn7bP8l.s 			page 55


 113:Core/Src/main.c ****   MX_FDCAN1_Init();
 1620              		.loc 1 113 3 view .LVU567
 1621 0012 FFF7FEFF 		bl	MX_ADC2_Init
 1622              	.LVL79:
 114:Core/Src/main.c ****   MX_USART1_UART_Init();
 1623              		.loc 1 114 3 view .LVU568
 1624 0016 FFF7FEFF 		bl	MX_FDCAN1_Init
 1625              	.LVL80:
 115:Core/Src/main.c ****   MX_TIM2_Init();
 1626              		.loc 1 115 3 view .LVU569
 1627 001a FFF7FEFF 		bl	MX_USART1_UART_Init
 1628              	.LVL81:
 116:Core/Src/main.c ****   MX_TIM16_Init();
 1629              		.loc 1 116 3 view .LVU570
 1630 001e FFF7FEFF 		bl	MX_TIM2_Init
 1631              	.LVL82:
 117:Core/Src/main.c ****   MX_TIM17_Init();
 1632              		.loc 1 117 3 view .LVU571
 1633 0022 FFF7FEFF 		bl	MX_TIM16_Init
 1634              	.LVL83:
 118:Core/Src/main.c ****   MX_TIM1_Init();
 1635              		.loc 1 118 3 view .LVU572
 1636 0026 FFF7FEFF 		bl	MX_TIM17_Init
 1637              	.LVL84:
 119:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1638              		.loc 1 119 3 view .LVU573
 1639 002a FFF7FEFF 		bl	MX_TIM1_Init
 1640              	.LVL85:
 122:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 1641              		.loc 1 122 4 view .LVU574
 1642 002e FFF7FEFF 		bl	FDCAN_Config
 1643              	.LVL86:
 123:Core/Src/main.c **** 	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 1644              		.loc 1 123 2 view .LVU575
 1645 0032 1D4C     		ldr	r4, .L111
 1646 0034 0021     		movs	r1, #0
 1647 0036 2046     		mov	r0, r4
 1648 0038 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1649              	.LVL87:
 124:Core/Src/main.c **** 	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 1650              		.loc 1 124 2 view .LVU576
 1651 003c 0421     		movs	r1, #4
 1652 003e 2046     		mov	r0, r4
 1653 0040 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1654              	.LVL88:
 125:Core/Src/main.c **** 	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 1655              		.loc 1 125 2 view .LVU577
 1656 0044 0021     		movs	r1, #0
 1657 0046 2046     		mov	r0, r4
 1658 0048 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1659              	.LVL89:
 126:Core/Src/main.c ****   /* USER CODE END 2 */
 1660              		.loc 1 126 2 view .LVU578
 1661 004c 0421     		movs	r1, #4
 1662 004e 2046     		mov	r0, r4
 1663 0050 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1664              	.LVL90:
ARM GAS  /tmp/ccn7bP8l.s 			page 56


 1665 0054 0AE0     		b	.L109
 1666              	.L108:
 154:Core/Src/main.c **** 		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_15);
 1667              		.loc 1 154 9 view .LVU579
 1668 0056 0A20     		movs	r0, #10
 1669 0058 FFF7FEFF 		bl	HAL_Delay
 1670              	.LVL91:
 155:Core/Src/main.c **** 		HAL_Delay(100);
 1671              		.loc 1 155 3 view .LVU580
 1672 005c 4FF40041 		mov	r1, #32768
 1673 0060 1248     		ldr	r0, .L111+4
 1674 0062 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1675              	.LVL92:
 156:Core/Src/main.c **** 	}
 1676              		.loc 1 156 3 view .LVU581
 1677 0066 6420     		movs	r0, #100
 1678 0068 FFF7FEFF 		bl	HAL_Delay
 1679              	.LVL93:
 131:Core/Src/main.c **** 	{
 1680              		.loc 1 131 8 view .LVU582
 1681              	.L109:
 131:Core/Src/main.c **** 	{
 1682              		.loc 1 131 2 view .LVU583
 137:Core/Src/main.c ****         TxData[1] = 0xAD;
 1683              		.loc 1 137 9 view .LVU584
 137:Core/Src/main.c ****         TxData[1] = 0xAD;
 1684              		.loc 1 137 19 is_stmt 0 view .LVU585
 1685 006c 104B     		ldr	r3, .L111+8
 1686 006e 114A     		ldr	r2, .L111+12
 1687 0070 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1688 0072 1A70     		strb	r2, [r3]
 138:Core/Src/main.c **** 		batata = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0);
 1689              		.loc 1 138 9 is_stmt 1 view .LVU586
 138:Core/Src/main.c **** 		batata = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0);
 1690              		.loc 1 138 19 is_stmt 0 view .LVU587
 1691 0074 AD22     		movs	r2, #173
 1692 0076 5A70     		strb	r2, [r3, #1]
 139:Core/Src/main.c ****         /* Start the Transmission process */
 1693              		.loc 1 139 3 is_stmt 1 view .LVU588
 139:Core/Src/main.c ****         /* Start the Transmission process */
 1694              		.loc 1 139 12 is_stmt 0 view .LVU589
 1695 0078 0F4C     		ldr	r4, .L111+16
 1696 007a 4021     		movs	r1, #64
 1697 007c 2046     		mov	r0, r4
 1698 007e FFF7FEFF 		bl	HAL_FDCAN_GetRxFifoFillLevel
 1699              	.LVL94:
 139:Core/Src/main.c ****         /* Start the Transmission process */
 1700              		.loc 1 139 10 view .LVU590
 1701 0082 0E4B     		ldr	r3, .L111+20
 1702 0084 1870     		strb	r0, [r3]
 147:Core/Src/main.c **** 			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 1703              		.loc 1 147 3 is_stmt 1 view .LVU591
 147:Core/Src/main.c **** 			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 1704              		.loc 1 147 6 is_stmt 0 view .LVU592
 1705 0086 4021     		movs	r1, #64
 1706 0088 2046     		mov	r0, r4
 1707 008a FFF7FEFF 		bl	HAL_FDCAN_GetRxFifoFillLevel
ARM GAS  /tmp/ccn7bP8l.s 			page 57


 1708              	.LVL95:
 147:Core/Src/main.c **** 			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 1709              		.loc 1 147 5 view .LVU593
 1710 008e 0028     		cmp	r0, #0
 1711 0090 E1D0     		beq	.L108
 148:Core/Src/main.c **** 			{
 1712              		.loc 1 148 4 is_stmt 1 view .LVU594
 148:Core/Src/main.c **** 			{
 1713              		.loc 1 148 8 is_stmt 0 view .LVU595
 1714 0092 0B4B     		ldr	r3, .L111+24
 1715 0094 0B4A     		ldr	r2, .L111+28
 1716 0096 4021     		movs	r1, #64
 1717 0098 2046     		mov	r0, r4
 1718 009a FFF7FEFF 		bl	HAL_FDCAN_GetRxMessage
 1719              	.LVL96:
 148:Core/Src/main.c **** 			{
 1720              		.loc 1 148 7 view .LVU596
 1721 009e 0028     		cmp	r0, #0
 1722 00a0 D9D0     		beq	.L108
 150:Core/Src/main.c **** 			}
 1723              		.loc 1 150 4 is_stmt 1 view .LVU597
 1724 00a2 FFF7FEFF 		bl	Error_Handler
 1725              	.LVL97:
 1726              	.L112:
 1727 00a6 00BF     		.align	2
 1728              	.L111:
 1729 00a8 00000000 		.word	.LANCHOR7
 1730 00ac 00080048 		.word	1207961600
 1731 00b0 00000000 		.word	.LANCHOR9
 1732 00b4 00000000 		.word	.LANCHOR10
 1733 00b8 00000000 		.word	.LANCHOR2
 1734 00bc 00000000 		.word	.LANCHOR11
 1735 00c0 00000000 		.word	.LANCHOR12
 1736 00c4 00000000 		.word	.LANCHOR13
 1737              		.cfi_endproc
 1738              	.LFE329:
 1740              		.section	.text.HAL_FDCAN_RxFifo0Callback,"ax",%progbits
 1741              		.align	1
 1742              		.global	HAL_FDCAN_RxFifo0Callback
 1743              		.syntax unified
 1744              		.thumb
 1745              		.thumb_func
 1747              	HAL_FDCAN_RxFifo0Callback:
 1748              	.LVL98:
 1749              	.LFB341:
 728:Core/Src/main.c ****   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 1750              		.loc 1 728 1 view -0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 0
 1753              		@ frame_needed = 0, uses_anonymous_args = 0
 729:Core/Src/main.c ****   {
 1754              		.loc 1 729 3 view .LVU599
 729:Core/Src/main.c ****   {
 1755              		.loc 1 729 5 is_stmt 0 view .LVU600
 1756 0000 11F0010F 		tst	r1, #1
 1757 0004 00D1     		bne	.L120
 1758 0006 7047     		bx	lr
ARM GAS  /tmp/ccn7bP8l.s 			page 58


 1759              	.L120:
 728:Core/Src/main.c ****   if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 1760              		.loc 1 728 1 view .LVU601
 1761 0008 08B5     		push	{r3, lr}
 1762              	.LCFI32:
 1763              		.cfi_def_cfa_offset 8
 1764              		.cfi_offset 3, -8
 1765              		.cfi_offset 14, -4
 732:Core/Src/main.c ****     {
 1766              		.loc 1 732 5 is_stmt 1 view .LVU602
 732:Core/Src/main.c ****     {
 1767              		.loc 1 732 9 is_stmt 0 view .LVU603
 1768 000a 074B     		ldr	r3, .L122
 1769 000c 074A     		ldr	r2, .L122+4
 1770 000e 4021     		movs	r1, #64
 1771              	.LVL99:
 732:Core/Src/main.c ****     {
 1772              		.loc 1 732 9 view .LVU604
 1773 0010 FFF7FEFF 		bl	HAL_FDCAN_GetRxMessage
 1774              	.LVL100:
 732:Core/Src/main.c ****     {
 1775              		.loc 1 732 8 view .LVU605
 1776 0014 28B9     		cbnz	r0, .L121
 737:Core/Src/main.c ****   }
 1777              		.loc 1 737 2 is_stmt 1 view .LVU606
 1778 0016 4FF48041 		mov	r1, #16384
 1779 001a 0548     		ldr	r0, .L122+8
 1780 001c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1781              	.LVL101:
 739:Core/Src/main.c **** void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 1782              		.loc 1 739 1 is_stmt 0 view .LVU607
 1783 0020 08BD     		pop	{r3, pc}
 1784              	.L121:
 734:Core/Src/main.c ****     }
 1785              		.loc 1 734 5 is_stmt 1 view .LVU608
 1786 0022 FFF7FEFF 		bl	Error_Handler
 1787              	.LVL102:
 1788              	.L123:
 1789 0026 00BF     		.align	2
 1790              	.L122:
 1791 0028 00000000 		.word	.LANCHOR12
 1792 002c 00000000 		.word	.LANCHOR13
 1793 0030 00080048 		.word	1207961600
 1794              		.cfi_endproc
 1795              	.LFE341:
 1797              		.section	.text.HAL_FDCAN_RxFifo1Callback,"ax",%progbits
 1798              		.align	1
 1799              		.global	HAL_FDCAN_RxFifo1Callback
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1804              	HAL_FDCAN_RxFifo1Callback:
 1805              	.LVL103:
 1806              	.LFB342:
 741:Core/Src/main.c ****   if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 1807              		.loc 1 741 1 view -0
 1808              		.cfi_startproc
ARM GAS  /tmp/ccn7bP8l.s 			page 59


 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 742:Core/Src/main.c ****   {
 1811              		.loc 1 742 3 view .LVU610
 742:Core/Src/main.c ****   {
 1812              		.loc 1 742 5 is_stmt 0 view .LVU611
 1813 0000 11F0080F 		tst	r1, #8
 1814 0004 00D1     		bne	.L131
 1815 0006 7047     		bx	lr
 1816              	.L131:
 741:Core/Src/main.c ****   if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 1817              		.loc 1 741 1 view .LVU612
 1818 0008 08B5     		push	{r3, lr}
 1819              	.LCFI33:
 1820              		.cfi_def_cfa_offset 8
 1821              		.cfi_offset 3, -8
 1822              		.cfi_offset 14, -4
 745:Core/Src/main.c ****     {
 1823              		.loc 1 745 5 is_stmt 1 view .LVU613
 745:Core/Src/main.c ****     {
 1824              		.loc 1 745 9 is_stmt 0 view .LVU614
 1825 000a 074B     		ldr	r3, .L133
 1826 000c 074A     		ldr	r2, .L133+4
 1827 000e 4121     		movs	r1, #65
 1828              	.LVL104:
 745:Core/Src/main.c ****     {
 1829              		.loc 1 745 9 view .LVU615
 1830 0010 FFF7FEFF 		bl	HAL_FDCAN_GetRxMessage
 1831              	.LVL105:
 745:Core/Src/main.c ****     {
 1832              		.loc 1 745 8 view .LVU616
 1833 0014 28B9     		cbnz	r0, .L132
 750:Core/Src/main.c ****   }
 1834              		.loc 1 750 2 is_stmt 1 view .LVU617
 1835 0016 4FF48041 		mov	r1, #16384
 1836 001a 0548     		ldr	r0, .L133+8
 1837 001c FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1838              	.LVL106:
 752:Core/Src/main.c **** 
 1839              		.loc 1 752 1 is_stmt 0 view .LVU618
 1840 0020 08BD     		pop	{r3, pc}
 1841              	.L132:
 747:Core/Src/main.c ****     }
 1842              		.loc 1 747 5 is_stmt 1 view .LVU619
 1843 0022 FFF7FEFF 		bl	Error_Handler
 1844              	.LVL107:
 1845              	.L134:
 1846 0026 00BF     		.align	2
 1847              	.L133:
 1848 0028 00000000 		.word	.LANCHOR12
 1849 002c 00000000 		.word	.LANCHOR13
 1850 0030 00080048 		.word	1207961600
 1851              		.cfi_endproc
 1852              	.LFE342:
 1854              		.global	TxData
 1855              		.global	TxHeader
 1856              		.global	RxData
ARM GAS  /tmp/ccn7bP8l.s 			page 60


 1857              		.global	RxHeader
 1858              		.global	ubKeyNumber
 1859              		.global	batata
 1860              		.global	huart1
 1861              		.global	htim17
 1862              		.global	htim16
 1863              		.global	htim2
 1864              		.global	htim1
 1865              		.global	hfdcan1
 1866              		.global	hadc2
 1867              		.global	hadc1
 1868              		.section	.bss.RxData,"aw",%nobits
 1869              		.align	2
 1870              		.set	.LANCHOR12,. + 0
 1873              	RxData:
 1874 0000 00000000 		.space	8
 1874      00000000 
 1875              		.section	.bss.RxHeader,"aw",%nobits
 1876              		.align	2
 1877              		.set	.LANCHOR13,. + 0
 1880              	RxHeader:
 1881 0000 00000000 		.space	40
 1881      00000000 
 1881      00000000 
 1881      00000000 
 1881      00000000 
 1882              		.section	.bss.TxData,"aw",%nobits
 1883              		.align	2
 1884              		.set	.LANCHOR9,. + 0
 1887              	TxData:
 1888 0000 00000000 		.space	8
 1888      00000000 
 1889              		.section	.bss.TxHeader,"aw",%nobits
 1890              		.align	2
 1891              		.set	.LANCHOR8,. + 0
 1894              	TxHeader:
 1895 0000 00000000 		.space	36
 1895      00000000 
 1895      00000000 
 1895      00000000 
 1895      00000000 
 1896              		.section	.bss.batata,"aw",%nobits
 1897              		.set	.LANCHOR11,. + 0
 1900              	batata:
 1901 0000 00       		.space	1
 1902              		.section	.bss.hadc1,"aw",%nobits
 1903              		.align	2
 1904              		.set	.LANCHOR0,. + 0
 1907              	hadc1:
 1908 0000 00000000 		.space	108
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1908      00000000 
 1909              		.section	.bss.hadc2,"aw",%nobits
 1910              		.align	2
 1911              		.set	.LANCHOR1,. + 0
ARM GAS  /tmp/ccn7bP8l.s 			page 61


 1914              	hadc2:
 1915 0000 00000000 		.space	108
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1915      00000000 
 1916              		.section	.bss.hfdcan1,"aw",%nobits
 1917              		.align	2
 1918              		.set	.LANCHOR2,. + 0
 1921              	hfdcan1:
 1922 0000 00000000 		.space	100
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1922      00000000 
 1923              		.section	.bss.htim1,"aw",%nobits
 1924              		.align	2
 1925              		.set	.LANCHOR7,. + 0
 1928              	htim1:
 1929 0000 00000000 		.space	76
 1929      00000000 
 1929      00000000 
 1929      00000000 
 1929      00000000 
 1930              		.section	.bss.htim16,"aw",%nobits
 1931              		.align	2
 1932              		.set	.LANCHOR5,. + 0
 1935              	htim16:
 1936 0000 00000000 		.space	76
 1936      00000000 
 1936      00000000 
 1936      00000000 
 1936      00000000 
 1937              		.section	.bss.htim17,"aw",%nobits
 1938              		.align	2
 1939              		.set	.LANCHOR6,. + 0
 1942              	htim17:
 1943 0000 00000000 		.space	76
 1943      00000000 
 1943      00000000 
 1943      00000000 
 1943      00000000 
 1944              		.section	.bss.htim2,"aw",%nobits
 1945              		.align	2
 1946              		.set	.LANCHOR4,. + 0
 1949              	htim2:
 1950 0000 00000000 		.space	76
 1950      00000000 
 1950      00000000 
 1950      00000000 
 1950      00000000 
 1951              		.section	.bss.huart1,"aw",%nobits
 1952              		.align	2
 1953              		.set	.LANCHOR3,. + 0
 1956              	huart1:
 1957 0000 00000000 		.space	144
 1957      00000000 
ARM GAS  /tmp/ccn7bP8l.s 			page 62


 1957      00000000 
 1957      00000000 
 1957      00000000 
 1958              		.section	.bss.ubKeyNumber,"aw",%nobits
 1959              		.set	.LANCHOR10,. + 0
 1962              	ubKeyNumber:
 1963 0000 00       		.space	1
 1964              		.text
 1965              	.Letext0:
 1966              		.file 3 "/home/alejopm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1967              		.file 4 "/home/alejopm/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1968              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1969              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 1970              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1971              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc.h"
 1972              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc_ex.h"
 1973              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 1974              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 1975              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc.h"
 1976              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc_ex.h"
 1977              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_fdcan.h"
 1978              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim.h"
 1979              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 1980              		.file 17 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_pwr_ex.h"
 1981              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_tim_ex.h"
 1982              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart_ex.h"
 1983              		.file 20 "Core/Inc/main.h"
 1984              		.file 21 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 1985              		.file 22 "<built-in>"
ARM GAS  /tmp/ccn7bP8l.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccn7bP8l.s:20     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:25     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccn7bP8l.s:181    .text.MX_GPIO_Init:00000000000000b4 $d
     /tmp/ccn7bP8l.s:189    .text.Error_Handler:0000000000000000 $t
     /tmp/ccn7bP8l.s:195    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccn7bP8l.s:227    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:232    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccn7bP8l.s:385    .text.MX_ADC1_Init:0000000000000090 $d
     /tmp/ccn7bP8l.s:392    .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:397    .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/ccn7bP8l.s:528    .text.MX_ADC2_Init:0000000000000078 $d
     /tmp/ccn7bP8l.s:536    .text.MX_FDCAN1_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:541    .text.MX_FDCAN1_Init:0000000000000000 MX_FDCAN1_Init
     /tmp/ccn7bP8l.s:631    .text.MX_FDCAN1_Init:0000000000000044 $d
     /tmp/ccn7bP8l.s:637    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:642    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccn7bP8l.s:741    .text.MX_USART1_UART_Init:0000000000000058 $d
     /tmp/ccn7bP8l.s:747    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:752    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccn7bP8l.s:885    .text.MX_TIM2_Init:0000000000000084 $d
     /tmp/ccn7bP8l.s:890    .text.MX_TIM16_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:895    .text.MX_TIM16_Init:0000000000000000 MX_TIM16_Init
     /tmp/ccn7bP8l.s:946    .text.MX_TIM16_Init:0000000000000028 $d
     /tmp/ccn7bP8l.s:952    .text.MX_TIM17_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:957    .text.MX_TIM17_Init:0000000000000000 MX_TIM17_Init
     /tmp/ccn7bP8l.s:1008   .text.MX_TIM17_Init:0000000000000028 $d
     /tmp/ccn7bP8l.s:1014   .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccn7bP8l.s:1019   .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccn7bP8l.s:1269   .text.MX_TIM1_Init:0000000000000100 $d
     /tmp/ccn7bP8l.s:1275   .text.FDCAN_Config:0000000000000000 $t
     /tmp/ccn7bP8l.s:1280   .text.FDCAN_Config:0000000000000000 FDCAN_Config
     /tmp/ccn7bP8l.s:1422   .text.FDCAN_Config:0000000000000088 $d
     /tmp/ccn7bP8l.s:1428   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccn7bP8l.s:1434   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccn7bP8l.s:1590   .text.main:0000000000000000 $t
     /tmp/ccn7bP8l.s:1596   .text.main:0000000000000000 main
     /tmp/ccn7bP8l.s:1729   .text.main:00000000000000a8 $d
     /tmp/ccn7bP8l.s:1741   .text.HAL_FDCAN_RxFifo0Callback:0000000000000000 $t
     /tmp/ccn7bP8l.s:1747   .text.HAL_FDCAN_RxFifo0Callback:0000000000000000 HAL_FDCAN_RxFifo0Callback
     /tmp/ccn7bP8l.s:1791   .text.HAL_FDCAN_RxFifo0Callback:0000000000000028 $d
     /tmp/ccn7bP8l.s:1798   .text.HAL_FDCAN_RxFifo1Callback:0000000000000000 $t
     /tmp/ccn7bP8l.s:1804   .text.HAL_FDCAN_RxFifo1Callback:0000000000000000 HAL_FDCAN_RxFifo1Callback
     /tmp/ccn7bP8l.s:1848   .text.HAL_FDCAN_RxFifo1Callback:0000000000000028 $d
     /tmp/ccn7bP8l.s:1887   .bss.TxData:0000000000000000 TxData
     /tmp/ccn7bP8l.s:1894   .bss.TxHeader:0000000000000000 TxHeader
     /tmp/ccn7bP8l.s:1873   .bss.RxData:0000000000000000 RxData
     /tmp/ccn7bP8l.s:1880   .bss.RxHeader:0000000000000000 RxHeader
     /tmp/ccn7bP8l.s:1962   .bss.ubKeyNumber:0000000000000000 ubKeyNumber
     /tmp/ccn7bP8l.s:1900   .bss.batata:0000000000000000 batata
     /tmp/ccn7bP8l.s:1956   .bss.huart1:0000000000000000 huart1
     /tmp/ccn7bP8l.s:1942   .bss.htim17:0000000000000000 htim17
     /tmp/ccn7bP8l.s:1935   .bss.htim16:0000000000000000 htim16
     /tmp/ccn7bP8l.s:1949   .bss.htim2:0000000000000000 htim2
     /tmp/ccn7bP8l.s:1928   .bss.htim1:0000000000000000 htim1
     /tmp/ccn7bP8l.s:1921   .bss.hfdcan1:0000000000000000 hfdcan1
ARM GAS  /tmp/ccn7bP8l.s 			page 64


     /tmp/ccn7bP8l.s:1914   .bss.hadc2:0000000000000000 hadc2
     /tmp/ccn7bP8l.s:1907   .bss.hadc1:0000000000000000 hadc1
     /tmp/ccn7bP8l.s:1869   .bss.RxData:0000000000000000 $d
     /tmp/ccn7bP8l.s:1876   .bss.RxHeader:0000000000000000 $d
     /tmp/ccn7bP8l.s:1883   .bss.TxData:0000000000000000 $d
     /tmp/ccn7bP8l.s:1890   .bss.TxHeader:0000000000000000 $d
     /tmp/ccn7bP8l.s:1901   .bss.batata:0000000000000000 $d
     /tmp/ccn7bP8l.s:1903   .bss.hadc1:0000000000000000 $d
     /tmp/ccn7bP8l.s:1910   .bss.hadc2:0000000000000000 $d
     /tmp/ccn7bP8l.s:1917   .bss.hfdcan1:0000000000000000 $d
     /tmp/ccn7bP8l.s:1924   .bss.htim1:0000000000000000 $d
     /tmp/ccn7bP8l.s:1931   .bss.htim16:0000000000000000 $d
     /tmp/ccn7bP8l.s:1938   .bss.htim17:0000000000000000 $d
     /tmp/ccn7bP8l.s:1945   .bss.htim2:0000000000000000 $d
     /tmp/ccn7bP8l.s:1952   .bss.huart1:0000000000000000 $d
     /tmp/ccn7bP8l.s:1963   .bss.ubKeyNumber:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
memset
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_FDCAN_Init
HAL_UART_Init
HAL_UARTEx_SetTxFifoThreshold
HAL_UARTEx_SetRxFifoThreshold
HAL_UARTEx_DisableFifoMode
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_ConfigBreakDeadTime
HAL_FDCAN_ConfigFilter
HAL_FDCAN_ConfigGlobalFilter
HAL_FDCAN_Start
HAL_FDCAN_ActivateNotification
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_TIM_PWM_Start
HAL_TIMEx_PWMN_Start
HAL_Delay
HAL_GPIO_TogglePin
HAL_FDCAN_GetRxFifoFillLevel
HAL_FDCAN_GetRxMessage
